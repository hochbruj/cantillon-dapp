<<<<<<< HEAD
[{"/Users/jan/defi/portfolio-builder/src/App.tsx":"1","/Users/jan/defi/portfolio-builder/src/index.tsx":"2","/Users/jan/defi/portfolio-builder/src/reportWebVitals.ts":"3","/Users/jan/defi/portfolio-builder/src/views/Portfolios.tsx":"4","/Users/jan/defi/portfolio-builder/src/components/Footer.tsx":"5","/Users/jan/defi/portfolio-builder/src/components/Header.tsx":"6","/Users/jan/defi/portfolio-builder/src/views/PortfolioDetail.tsx":"7","/Users/jan/defi/portfolio-builder/src/config/routes.ts":"8","/Users/jan/defi/portfolio-builder/src/services/getPortfolios.ts":"9","/Users/jan/defi/portfolio-builder/src/views/Routes.tsx":"10","/Users/jan/defi/portfolio-builder/src/components/Calculator.tsx":"11","/Users/jan/defi/portfolio-builder/src/utilities/formatters.ts":"12","/Users/jan/defi/portfolio-builder/src/components/ThemeButton.tsx":"13","/Users/jan/defi/portfolio-builder/src/components/WalletConnectButton.tsx":"14","/Users/jan/defi/portfolio-builder/src/store/store.tsx":"15","/Users/jan/defi/portfolio-builder/src/components/GetPortfolioModal.tsx":"16","/Users/jan/defi/portfolio-builder/src/config/ethData.ts":"17","/Users/jan/defi/portfolio-builder/src/components/Web3Data.tsx":"18","/Users/jan/defi/portfolio-builder/src/services/getPrices.ts":"19","/Users/jan/defi/portfolio-builder/src/hooks/useUniswap.ts":"20","/Users/jan/defi/portfolio-builder/src/hooks/useBalances.ts":"21","/Users/jan/defi/portfolio-builder/src/hooks/usePrices.ts":"22","/Users/jan/defi/portfolio-builder/src/components/WalletButton.tsx":"23","/Users/jan/defi/portfolio-builder/src/config/apis.ts":"24","/Users/jan/defi/portfolio-builder/src/services/getGasPrices.ts":"25","/Users/jan/defi/portfolio-builder/src/utilities/calculations.ts":"26","/Users/jan/defi/portfolio-builder/src/components/PurchaseButton.tsx":"27","/Users/jan/defi/portfolio-builder/src/views/Dashboard.tsx":"28","/Users/jan/defi/portfolio-builder/src/components/AssetTable.tsx":"29","/Users/jan/defi/portfolio-builder/src/components/Message.tsx":"30","/Users/jan/defi/portfolio-builder/src/components/Help.tsx":"31"},{"size":1710,"mtime":1618471853848,"results":"32","hashOfConfig":"33"},{"size":500,"mtime":1611439717839,"results":"34","hashOfConfig":"33"},{"size":425,"mtime":1611439717841,"results":"35","hashOfConfig":"33"},{"size":8232,"mtime":1618965004008,"results":"36","hashOfConfig":"33"},{"size":1204,"mtime":1615023103778,"results":"37","hashOfConfig":"33"},{"size":1884,"mtime":1618184976342,"results":"38","hashOfConfig":"33"},{"size":9564,"mtime":1618965095698,"results":"39","hashOfConfig":"33"},{"size":109,"mtime":1616626482249,"results":"40","hashOfConfig":"33"},{"size":279,"mtime":1615419755388,"results":"41","hashOfConfig":"33"},{"size":624,"mtime":1616819905764,"results":"42","hashOfConfig":"33"},{"size":3496,"mtime":1613601828684,"results":"43","hashOfConfig":"33"},{"size":1303,"mtime":1618964790480,"results":"44","hashOfConfig":"33"},{"size":953,"mtime":1614417211062,"results":"45","hashOfConfig":"33"},{"size":3039,"mtime":1617009230267,"results":"46","hashOfConfig":"33"},{"size":2520,"mtime":1617530054906,"results":"47","hashOfConfig":"33"},{"size":10816,"mtime":1619002564770,"results":"48","hashOfConfig":"33"},{"size":2724,"mtime":1619003224002,"results":"49","hashOfConfig":"33"},{"size":997,"mtime":1616834670070,"results":"50","hashOfConfig":"33"},{"size":1677,"mtime":1619002546997,"results":"51","hashOfConfig":"33"},{"size":2260,"mtime":1619002486770,"results":"52","hashOfConfig":"33"},{"size":1616,"mtime":1617008978827,"results":"53","hashOfConfig":"33"},{"size":616,"mtime":1617531091325,"results":"54","hashOfConfig":"33"},{"size":3699,"mtime":1616835278439,"results":"55","hashOfConfig":"33"},{"size":238,"mtime":1618963429818,"results":"56","hashOfConfig":"33"},{"size":438,"mtime":1616491732164,"results":"57","hashOfConfig":"33"},{"size":1428,"mtime":1617532069131,"results":"58","hashOfConfig":"33"},{"size":2226,"mtime":1616838408718,"results":"59","hashOfConfig":"33"},{"size":2394,"mtime":1618965135365,"results":"60","hashOfConfig":"33"},{"size":3245,"mtime":1618964960717,"results":"61","hashOfConfig":"33"},{"size":1104,"mtime":1616648806731,"results":"62","hashOfConfig":"33"},{"size":575,"mtime":1617148561262,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"67"},"1765l6l",{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"96"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"100"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"113","messages":"114","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"96"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"131","messages":"132","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/jan/defi/portfolio-builder/src/App.tsx",["137","138"],"import React, { useState } from \"react\";\nimport { pink, deepPurple } from \"@material-ui/core/colors\";\nimport Header from \"./components/Header\";\nimport { CssBaseline, PaletteType } from \"@material-ui/core\";\nimport Routes from \"./views/Routes\";\nimport Footer from \"./components/Footer\";\nimport { Router } from \"react-router-dom\";\nimport { createBrowserHistory } from \"history\";\nimport { Portfolio } from \"./sharedTypes/portfolios\";\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\nimport { StoreProvider } from \"./store/store\";\nimport Web3Data from \"./components/Web3Data\";\nimport Message from \"./components/Message\";\n\nconst browserHistory = createBrowserHistory();\n\nexport default function App() {\n  const [portfolios, setPortfolios] = useState<Portfolio[] | null>(null);\n  const [theme, setTheme] = useState<PaletteType>(\"dark\");\n\n  const muiTheme = createMuiTheme({\n    palette: {\n      type: theme,\n      primary: {\n        // Purple and green play nicely together.\n        main: pink[600],\n      },\n      secondary: {\n        // This is green.A700 as hex.\n        main: deepPurple[500],\n      },\n    },\n  });\n\n  // useEffect(() => {\n  //   const loadPortfolios = async () => {\n  //     setPortfolios(await getPortfolios());\n  //   };\n  //   loadPortfolios();\n  // }, []);\n  return (\n    <React.Fragment>\n      <ThemeProvider theme={muiTheme}>\n        <CssBaseline />\n        <StoreProvider>\n          <Web3Data />\n          <Router history={browserHistory}>\n            <Header setTheme={setTheme} theme={theme} />\n            <Routes />\n            <Message />\n            <Footer />\n          </Router>\n        </StoreProvider>\n      </ThemeProvider>\n    </React.Fragment>\n  );\n}\n",["139","140"],"/Users/jan/defi/portfolio-builder/src/index.tsx",[],["141","142"],"/Users/jan/defi/portfolio-builder/src/reportWebVitals.ts",[],["143","144"],"/Users/jan/defi/portfolio-builder/src/views/Portfolios.tsx",[],"/Users/jan/defi/portfolio-builder/src/components/Footer.tsx",[],"/Users/jan/defi/portfolio-builder/src/components/Header.tsx",["145"],"/Users/jan/defi/portfolio-builder/src/views/PortfolioDetail.tsx",["146"],"/Users/jan/defi/portfolio-builder/src/config/routes.ts",[],"/Users/jan/defi/portfolio-builder/src/services/getPortfolios.ts",[],["147","148"],"/Users/jan/defi/portfolio-builder/src/views/Routes.tsx",[],"/Users/jan/defi/portfolio-builder/src/components/Calculator.tsx",[],"/Users/jan/defi/portfolio-builder/src/utilities/formatters.ts",[],"/Users/jan/defi/portfolio-builder/src/components/ThemeButton.tsx",["149","150"],"import React, { FC, useState } from \"react\";\nimport { IconButton, PaletteType, Tooltip } from \"@material-ui/core\";\nimport Brightness4Icon from \"@material-ui/icons/Brightness4\";\nimport BrightnessHighIcon from \"@material-ui/icons/BrightnessHigh\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({}));\n\ninterface ThemeButtonProps {\n  setTheme: (theme: PaletteType) => void;\n  theme: PaletteType;\n}\n\nconst ThemeButton: FC<ThemeButtonProps> = ({ setTheme, theme }) => {\n  const classes = useStyles();\n\n  const toggleTheme = () => {\n    theme === \"dark\" ? setTheme(\"light\") : setTheme(\"dark\");\n  };\n\n  return (\n    <Tooltip title={`Switch to ${theme === \"dark\" ? \"light\" : \"dark\"} mode`}>\n      <IconButton color=\"inherit\" aria-label=\"back\" onClick={toggleTheme}>\n        {theme === \"dark\" ? <BrightnessHighIcon /> : <Brightness4Icon />}\n      </IconButton>\n    </Tooltip>\n  );\n};\n\nexport default ThemeButton;\n",["151","152"],"/Users/jan/defi/portfolio-builder/src/components/WalletConnectButton.tsx",["153","154"],"import { FC, useState, useEffect, useRef } from \"react\";\nimport { Button, CircularProgress } from \"@material-ui/core\";\nimport Web3Modal from \"web3modal\";\nimport Web3 from \"web3\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport Fortmatic from \"fortmatic\";\nimport Portis from \"@portis/web3\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { useStore, ConnectedWeb3, Message } from \"../store/store\";\nimport { networks } from \"../config/ethData\";\nimport { useBalances } from \"../hooks/useBalances\";\n\nconst useStyles = makeStyles((theme) => ({\n  wrapper: {\n    margin: theme.spacing(1),\n    position: \"relative\",\n  },\n  buttonProgress: {\n    color: \"#81c784\",\n    position: \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    marginTop: -12,\n    marginLeft: -12,\n  },\n}));\n\nconst providerOptions = {\n  walletconnect: {\n    package: WalletConnectProvider,\n    options: {\n      infuraId: process.env.REACT_APP_INFURA_ID,\n    },\n  },\n  fortmatic: {\n    package: Fortmatic,\n    options: {\n      key: process.env.REACT_APP_FORTMATIC_ID,\n    },\n  },\n  portis: {\n    package: Portis,\n    options: {\n      id: process.env.REACT_APP_PORTIS_ID,\n    },\n  },\n};\n\nconst web3ModalOptions = {\n  cacheProvider: false,\n  providerOptions,\n};\n\nconst web3ModalInstance = new Web3Modal(web3ModalOptions);\n\nconst WalletConnectButton: FC = () => {\n  const classes = useStyles();\n  const { state, dispatch } = useStore();\n  const { balances } = state;\n  const [loading, setLoading] = useState(false);\n  const [account, setAccount] = useState<string>(\"\");\n\n  useEffect(() => {\n    if (balances) {\n      setLoading(false);\n    }\n  }, [balances]);\n\n  const connetWallet = async () => {\n    setLoading(true);\n    try {\n      const provider = await web3ModalInstance.connect();\n      const web3 = new Web3(provider);\n      const accounts = await web3.eth.getAccounts();\n      const account = accounts[0];\n      const networkId = await web3.eth.net.getId();\n      const wallet = \"Metamask\";\n      const connectedWeb3: ConnectedWeb3 = {\n        web3,\n        account,\n        network: networks[networkId],\n        wallet,\n      };\n      //check for network\n      if (networks[networkId] != process.env.REACT_APP_ETHEREUM_NETWORK) {\n        const message: Message = {\n          type: \"error\",\n          text: `Wrong network! Please change your wallet to Kovan Test Network.`,\n        };\n        dispatch({ type: \"updateMessage\", message });\n        setLoading(false);\n      } else {\n        dispatch({ type: \"connectWeb3\", connectedWeb3 });\n        setAccount(account);\n      }\n    } catch (e) {\n      setLoading(false);\n    }\n  };\n\n  useBalances(account);\n\n  return (\n    <div className={classes.wrapper}>\n      <Button\n        variant=\"contained\"\n        color=\"secondary\"\n        onClick={connetWallet}\n        disabled={loading}\n      >\n        Connect Wallet\n      </Button>\n      {loading && (\n        <CircularProgress size={24} className={classes.buttonProgress} />\n      )}\n    </div>\n  );\n};\n\nexport default WalletConnectButton;\n",["155","156"],"/Users/jan/defi/portfolio-builder/src/store/store.tsx",[],"/Users/jan/defi/portfolio-builder/src/components/GetPortfolioModal.tsx",["157","158"],"/Users/jan/defi/portfolio-builder/src/config/ethData.ts",[],"/Users/jan/defi/portfolio-builder/src/components/Web3Data.tsx",["159","160"],"/Users/jan/defi/portfolio-builder/src/services/getPrices.ts",[],"/Users/jan/defi/portfolio-builder/src/hooks/useUniswap.ts",["161"],"/Users/jan/defi/portfolio-builder/src/hooks/useBalances.ts",["162","163"],"import { useEffect, useState } from \"react\";\nimport { useStore } from \"../store/store\";\nimport { tokens, contractsAddressesMap } from \"../config/ethData\";\nimport { TokenAmounts, Token } from \"../sharedTypes/eth.types\";\nimport ERC20 from \"../contracts/ERC20.json\";\n\nexport const useBalances = (account: string) => {\n  const { state, dispatch } = useStore();\n  const { connectedWeb3 } = state;\n  const [updateBalance, setUpdateBalance] = useState(false);\n  const { web3, network } = connectedWeb3 || {};\n\n  const getBalances = async () => {\n    const erc20TokenList = Object.keys(tokens).filter(\n      (token) => token !== \"ETH\"\n    ) as [Token];\n    const erc20Contracts = erc20TokenList.map(\n      (token) =>\n        new web3!.eth.Contract(\n          ERC20.abi as any,\n          contractsAddressesMap[network!][token]\n        )\n    );\n    const balancPromises = Promise.all(\n      erc20Contracts.map((contract) =>\n        contract.methods.balanceOf(account).call()\n      )\n    );\n    const balanceResults = await balancPromises;\n    let balances = {} as TokenAmounts;\n\n    let i = 0;\n    for (const token of erc20TokenList) {\n      balances[token] = balanceResults[i];\n      i++;\n    }\n    balances.ETH = await web3!.eth.getBalance(account!);\n    dispatch({ type: \"updateBalances\", balances });\n  };\n\n  useEffect(() => {\n    if (updateBalance) {\n      console.log(\"calling b inside update balances\");\n      getBalances();\n      setUpdateBalance(false);\n    }\n  }, [updateBalance]);\n\n  useEffect(() => {\n    if (account && web3 && network) {\n      getBalances();\n    }\n  }, [account]);\n\n  return setUpdateBalance;\n};\n","/Users/jan/defi/portfolio-builder/src/hooks/usePrices.ts",["164"],"/Users/jan/defi/portfolio-builder/src/components/WalletButton.tsx",[],"/Users/jan/defi/portfolio-builder/src/config/apis.ts",[],"/Users/jan/defi/portfolio-builder/src/services/getGasPrices.ts",[],"/Users/jan/defi/portfolio-builder/src/utilities/calculations.ts",[],"/Users/jan/defi/portfolio-builder/src/components/PurchaseButton.tsx",["165","166","167","168"],"import { FC, useState, useEffect, useRef } from \"react\";\nimport { Button, CircularProgress } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { useStore, Message } from \"../store/store\";\nimport { networks } from \"../config/ethData\";\nimport { useBalances } from \"../hooks/useBalances\";\nimport { useHistory } from \"react-router-dom\";\nimport { ROUTES } from \"../config/routes\";\n\ninterface PurchaseButtonProps {\n  txInput: any;\n  portfolioBalancer: any;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  wrapper: {\n    margin: theme.spacing(1),\n    position: \"relative\",\n  },\n  buttonProgress: {\n    color: \"#81c784\",\n    position: \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    marginTop: -12,\n    marginLeft: -12,\n  },\n}));\n\nconst PurchaseButton: FC<PurchaseButtonProps> = ({\n  txInput,\n  portfolioBalancer,\n}) => {\n  const classes = useStyles();\n  const { state, dispatch } = useStore();\n  const { connectedWeb3 } = state;\n  const history = useHistory();\n  const [loading, setLoading] = useState(false);\n  const setUpdateBalance = useBalances(connectedWeb3!.account);\n\n  const purchaseAssets = async () => {\n    setLoading(true);\n    try {\n      const result = await portfolioBalancer.methods\n        .rebalance(txInput[0], txInput[1], txInput[2])\n        .send({\n          from: connectedWeb3!.account,\n          value: txInput[3],\n          gas: \"700000\",\n          gasPrice: \"1000000000\",\n        });\n      setUpdateBalance(true);\n      const message = {\n        type: \"success\",\n        text:\n          \"Congratulation! You successfully purchased the portfolio! It might take a few seconds to update your assets.\",\n      } as Message;\n      dispatch({ type: \"updateMessage\", message });\n      history.push(ROUTES.DASHBOARD);\n      setLoading(false);\n    } catch (e) {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className={classes.wrapper}>\n      <Button\n        variant=\"contained\"\n        color=\"secondary\"\n        onClick={purchaseAssets}\n        disabled={loading}\n      >\n        Purchase assets\n      </Button>\n      {loading && (\n        <CircularProgress size={24} className={classes.buttonProgress} />\n      )}\n    </div>\n  );\n};\n\nexport default PurchaseButton;\n","/Users/jan/defi/portfolio-builder/src/views/Dashboard.tsx",["169","170","171","172"],"/Users/jan/defi/portfolio-builder/src/components/AssetTable.tsx",["173","174","175","176","177","178","179","180"],"/Users/jan/defi/portfolio-builder/src/components/Message.tsx",[],"/Users/jan/defi/portfolio-builder/src/components/Help.tsx",[],{"ruleId":"181","severity":1,"message":"182","line":18,"column":10,"nodeType":"183","messageId":"184","endLine":18,"endColumn":20},{"ruleId":"181","severity":1,"message":"185","line":18,"column":22,"nodeType":"183","messageId":"184","endLine":18,"endColumn":35},{"ruleId":"186","replacedBy":"187"},{"ruleId":"188","replacedBy":"189"},{"ruleId":"186","replacedBy":"190"},{"ruleId":"188","replacedBy":"191"},{"ruleId":"186","replacedBy":"192"},{"ruleId":"188","replacedBy":"193"},{"ruleId":"181","severity":1,"message":"194","line":13,"column":14,"nodeType":"183","messageId":"184","endLine":13,"endColumn":22},{"ruleId":"195","severity":1,"message":"196","line":174,"column":25,"nodeType":"197","endLine":177,"endColumn":27},{"ruleId":"186","replacedBy":"198"},{"ruleId":"188","replacedBy":"199"},{"ruleId":"181","severity":1,"message":"194","line":1,"column":21,"nodeType":"183","messageId":"184","endLine":1,"endColumn":29},{"ruleId":"181","severity":1,"message":"200","line":15,"column":9,"nodeType":"183","messageId":"184","endLine":15,"endColumn":16},{"ruleId":"186","replacedBy":"201"},{"ruleId":"188","replacedBy":"202"},{"ruleId":"181","severity":1,"message":"203","line":1,"column":35,"nodeType":"183","messageId":"184","endLine":1,"endColumn":41},{"ruleId":"204","severity":1,"message":"205","line":85,"column":31,"nodeType":"206","messageId":"207","endLine":85,"endColumn":33},{"ruleId":"186","replacedBy":"208"},{"ruleId":"188","replacedBy":"209"},{"ruleId":"210","severity":1,"message":"211","line":201,"column":6,"nodeType":"212","endLine":201,"endColumn":30,"suggestions":"213"},{"ruleId":"195","severity":1,"message":"196","line":237,"column":25,"nodeType":"197","endLine":240,"endColumn":27},{"ruleId":"210","severity":1,"message":"214","line":20,"column":6,"nodeType":"212","endLine":20,"endColumn":8,"suggestions":"215"},{"ruleId":"210","severity":1,"message":"214","line":25,"column":6,"nodeType":"212","endLine":25,"endColumn":15,"suggestions":"216"},{"ruleId":"210","severity":1,"message":"217","line":74,"column":6,"nodeType":"212","endLine":74,"endColumn":21,"suggestions":"218"},{"ruleId":"210","severity":1,"message":"219","line":47,"column":6,"nodeType":"212","endLine":47,"endColumn":21,"suggestions":"220"},{"ruleId":"210","severity":1,"message":"221","line":53,"column":6,"nodeType":"212","endLine":53,"endColumn":15,"suggestions":"222"},{"ruleId":"210","severity":1,"message":"223","line":20,"column":6,"nodeType":"212","endLine":20,"endColumn":20,"suggestions":"224"},{"ruleId":"181","severity":1,"message":"225","line":1,"column":24,"nodeType":"183","messageId":"184","endLine":1,"endColumn":33},{"ruleId":"181","severity":1,"message":"203","line":1,"column":35,"nodeType":"183","messageId":"184","endLine":1,"endColumn":41},{"ruleId":"181","severity":1,"message":"226","line":5,"column":10,"nodeType":"183","messageId":"184","endLine":5,"endColumn":18},{"ruleId":"181","severity":1,"message":"227","line":44,"column":13,"nodeType":"183","messageId":"184","endLine":44,"endColumn":19},{"ruleId":"181","severity":1,"message":"194","line":1,"column":14,"nodeType":"183","messageId":"184","endLine":1,"endColumn":22},{"ruleId":"181","severity":1,"message":"225","line":1,"column":24,"nodeType":"183","messageId":"184","endLine":1,"endColumn":33},{"ruleId":"181","severity":1,"message":"228","line":9,"column":10,"nodeType":"183","messageId":"184","endLine":9,"endColumn":19},{"ruleId":"181","severity":1,"message":"229","line":11,"column":20,"nodeType":"183","messageId":"184","endLine":11,"endColumn":30},{"ruleId":"181","severity":1,"message":"194","line":1,"column":17,"nodeType":"183","messageId":"184","endLine":1,"endColumn":25},{"ruleId":"181","severity":1,"message":"230","line":2,"column":8,"nodeType":"183","messageId":"184","endLine":2,"endColumn":12},{"ruleId":"181","severity":1,"message":"231","line":6,"column":3,"nodeType":"183","messageId":"184","endLine":6,"endColumn":14},{"ruleId":"181","severity":1,"message":"232","line":9,"column":3,"nodeType":"183","messageId":"184","endLine":9,"endColumn":9},{"ruleId":"181","severity":1,"message":"233","line":17,"column":3,"nodeType":"183","messageId":"184","endLine":17,"endColumn":9},{"ruleId":"181","severity":1,"message":"234","line":48,"column":18,"nodeType":"183","messageId":"184","endLine":48,"endColumn":26},{"ruleId":"181","severity":1,"message":"235","line":49,"column":29,"nodeType":"183","messageId":"184","endLine":49,"endColumn":42},{"ruleId":"195","severity":1,"message":"196","line":78,"column":21,"nodeType":"197","endLine":81,"endColumn":23},"@typescript-eslint/no-unused-vars","'portfolios' is assigned a value but never used.","Identifier","unusedVar","'setPortfolios' is assigned a value but never used.","no-native-reassign",["236"],"no-negated-in-lhs",["237"],["236"],["237"],["236"],["237"],"'useState' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["236"],["237"],"'classes' is assigned a value but never used.",["236"],["237"],"'useRef' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected",["236"],["237"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'account', 'portfolioBalancer.methods', and 'txInput'. Either include them or remove the dependency array.","ArrayExpression",["238"],"React Hook useEffect has missing dependencies: 'dispatch' and 'setUpdatePrices'. Either include them or remove the dependency array.",["239"],["240"],"React Hook useEffect has missing dependencies: 'connectedWeb3' and 'tradeAmounts'. Either include them or remove the dependency array.",["241"],"React Hook useEffect has a missing dependency: 'getBalances'. Either include it or remove the dependency array.",["242"],"React Hook useEffect has missing dependencies: 'getBalances', 'network', and 'web3'. Either include them or remove the dependency array.",["243"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["244"],"'useEffect' is defined but never used.","'networks' is defined but never used.","'result' is assigned a value but never used.","'Portfolio' is defined but never used.","'useHistory' is defined but never used.","'clsx' is defined but never used.","'CardActions' is defined but never used.","'Button' is defined but never used.","'Avatar' is defined but never used.","'dispatch' is assigned a value but never used.","'connectedWeb3' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"245","fix":"246"},{"desc":"247","fix":"248"},{"desc":"249","fix":"250"},{"desc":"251","fix":"252"},{"desc":"253","fix":"254"},{"desc":"255","fix":"256"},{"desc":"257","fix":"258"},"Update the dependencies array to be: [uniswapAmounts, prices, txInput, portfolioBalancer.methods, account]",{"range":"259","text":"260"},"Update the dependencies array to be: [dispatch, setUpdatePrices]",{"range":"261","text":"262"},"Update the dependencies array to be: [account, dispatch, setUpdatePrices]",{"range":"263","text":"264"},"Update the dependencies array to be: [connectedWeb3, tradeAmounts, updateUniswap]",{"range":"265","text":"266"},"Update the dependencies array to be: [getBalances, updateBalance]",{"range":"267","text":"268"},"Update the dependencies array to be: [account, getBalances, network, web3]",{"range":"269","text":"270"},"Update the dependencies array to be: [dispatch, updatePrices]",{"range":"271","text":"272"},[5139,5163],"[uniswapAmounts, prices, txInput, portfolioBalancer.methods, account]",[665,667],"[dispatch, setUpdatePrices]",[773,782],"[account, dispatch, setUpdatePrices]",[2192,2207],"[connectedWeb3, tradeAmounts, updateUniswap]",[1464,1479],"[getBalances, updateBalance]",[1573,1582],"[account, getBalances, network, web3]",[570,584],"[dispatch, updatePrices]"]
=======
[{"/Users/jan/defi/portfolio-builder/src/App.tsx":"1","/Users/jan/defi/portfolio-builder/src/index.tsx":"2","/Users/jan/defi/portfolio-builder/src/reportWebVitals.ts":"3","/Users/jan/defi/portfolio-builder/src/views/Portfolios.tsx":"4","/Users/jan/defi/portfolio-builder/src/components/Footer.tsx":"5","/Users/jan/defi/portfolio-builder/src/components/Header.tsx":"6","/Users/jan/defi/portfolio-builder/src/views/PortfolioDetail.tsx":"7","/Users/jan/defi/portfolio-builder/src/config/routes.ts":"8","/Users/jan/defi/portfolio-builder/src/services/getPortfolios.ts":"9","/Users/jan/defi/portfolio-builder/src/views/Routes.tsx":"10","/Users/jan/defi/portfolio-builder/src/components/Calculator.tsx":"11","/Users/jan/defi/portfolio-builder/src/utilities/formatters.ts":"12","/Users/jan/defi/portfolio-builder/src/components/ThemeButton.tsx":"13","/Users/jan/defi/portfolio-builder/src/components/WalletConnectButton.tsx":"14","/Users/jan/defi/portfolio-builder/src/store/store.tsx":"15","/Users/jan/defi/portfolio-builder/src/components/GetPortfolioModal.tsx":"16","/Users/jan/defi/portfolio-builder/src/config/ethData.ts":"17","/Users/jan/defi/portfolio-builder/src/components/Web3Data.tsx":"18","/Users/jan/defi/portfolio-builder/src/services/getPrices.ts":"19","/Users/jan/defi/portfolio-builder/src/hooks/useUniswap.ts":"20","/Users/jan/defi/portfolio-builder/src/hooks/useBalances.ts":"21","/Users/jan/defi/portfolio-builder/src/hooks/usePrices.ts":"22","/Users/jan/defi/portfolio-builder/src/components/WalletButton.tsx":"23","/Users/jan/defi/portfolio-builder/src/config/apis.ts":"24","/Users/jan/defi/portfolio-builder/src/services/getGasPrices.ts":"25","/Users/jan/defi/portfolio-builder/src/utilities/calculations.ts":"26","/Users/jan/defi/portfolio-builder/src/components/PurchaseButton.tsx":"27","/Users/jan/defi/portfolio-builder/src/views/Dashboard.tsx":"28","/Users/jan/defi/portfolio-builder/src/components/AssetTable.tsx":"29","/Users/jan/defi/portfolio-builder/src/components/Message.tsx":"30","/Users/jan/defi/portfolio-builder/src/components/Help.tsx":"31"},{"size":1710,"mtime":1618471853848,"results":"32","hashOfConfig":"33"},{"size":500,"mtime":1611439717839,"results":"34","hashOfConfig":"33"},{"size":425,"mtime":1611439717841,"results":"35","hashOfConfig":"33"},{"size":8583,"mtime":1619048353730,"results":"36","hashOfConfig":"33"},{"size":1204,"mtime":1615023103778,"results":"37","hashOfConfig":"33"},{"size":1884,"mtime":1618184976342,"results":"38","hashOfConfig":"33"},{"size":10972,"mtime":1619049309605,"results":"39","hashOfConfig":"33"},{"size":109,"mtime":1616626482249,"results":"40","hashOfConfig":"33"},{"size":279,"mtime":1615419755388,"results":"41","hashOfConfig":"33"},{"size":624,"mtime":1616819905764,"results":"42","hashOfConfig":"33"},{"size":3938,"mtime":1619049047953,"results":"43","hashOfConfig":"33"},{"size":1303,"mtime":1618964790480,"results":"44","hashOfConfig":"33"},{"size":953,"mtime":1614417211062,"results":"45","hashOfConfig":"33"},{"size":3039,"mtime":1617009230267,"results":"46","hashOfConfig":"33"},{"size":2520,"mtime":1617530054906,"results":"47","hashOfConfig":"33"},{"size":10816,"mtime":1619003521654,"results":"48","hashOfConfig":"33"},{"size":2686,"mtime":1619045988725,"results":"49","hashOfConfig":"33"},{"size":997,"mtime":1616834670070,"results":"50","hashOfConfig":"33"},{"size":1683,"mtime":1617531048899,"results":"51","hashOfConfig":"33"},{"size":2300,"mtime":1619003521652,"results":"52","hashOfConfig":"33"},{"size":1616,"mtime":1617008978827,"results":"53","hashOfConfig":"33"},{"size":616,"mtime":1617531091325,"results":"54","hashOfConfig":"33"},{"size":3699,"mtime":1616835278439,"results":"55","hashOfConfig":"33"},{"size":238,"mtime":1618963429818,"results":"56","hashOfConfig":"33"},{"size":438,"mtime":1616491732164,"results":"57","hashOfConfig":"33"},{"size":1428,"mtime":1617532069131,"results":"58","hashOfConfig":"33"},{"size":2226,"mtime":1616838408718,"results":"59","hashOfConfig":"33"},{"size":2394,"mtime":1618965135365,"results":"60","hashOfConfig":"33"},{"size":3245,"mtime":1618964960717,"results":"61","hashOfConfig":"33"},{"size":1104,"mtime":1616648806731,"results":"62","hashOfConfig":"33"},{"size":575,"mtime":1617148561262,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"67"},"1765l6l",{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"96"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"73"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"73"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"73"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"73"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"133","messages":"134","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"73"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/jan/defi/portfolio-builder/src/App.tsx",["141","142"],"import React, { useState } from \"react\";\nimport { pink, deepPurple } from \"@material-ui/core/colors\";\nimport Header from \"./components/Header\";\nimport { CssBaseline, PaletteType } from \"@material-ui/core\";\nimport Routes from \"./views/Routes\";\nimport Footer from \"./components/Footer\";\nimport { Router } from \"react-router-dom\";\nimport { createBrowserHistory } from \"history\";\nimport { Portfolio } from \"./sharedTypes/portfolios\";\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\nimport { StoreProvider } from \"./store/store\";\nimport Web3Data from \"./components/Web3Data\";\nimport Message from \"./components/Message\";\n\nconst browserHistory = createBrowserHistory();\n\nexport default function App() {\n  const [portfolios, setPortfolios] = useState<Portfolio[] | null>(null);\n  const [theme, setTheme] = useState<PaletteType>(\"dark\");\n\n  const muiTheme = createMuiTheme({\n    palette: {\n      type: theme,\n      primary: {\n        // Purple and green play nicely together.\n        main: pink[600],\n      },\n      secondary: {\n        // This is green.A700 as hex.\n        main: deepPurple[500],\n      },\n    },\n  });\n\n  // useEffect(() => {\n  //   const loadPortfolios = async () => {\n  //     setPortfolios(await getPortfolios());\n  //   };\n  //   loadPortfolios();\n  // }, []);\n  return (\n    <React.Fragment>\n      <ThemeProvider theme={muiTheme}>\n        <CssBaseline />\n        <StoreProvider>\n          <Web3Data />\n          <Router history={browserHistory}>\n            <Header setTheme={setTheme} theme={theme} />\n            <Routes />\n            <Message />\n            <Footer />\n          </Router>\n        </StoreProvider>\n      </ThemeProvider>\n    </React.Fragment>\n  );\n}\n",["143","144"],"/Users/jan/defi/portfolio-builder/src/index.tsx",[],["145","146"],"/Users/jan/defi/portfolio-builder/src/reportWebVitals.ts",[],["147","148"],"/Users/jan/defi/portfolio-builder/src/views/Portfolios.tsx",[],"/Users/jan/defi/portfolio-builder/src/components/Footer.tsx",[],"/Users/jan/defi/portfolio-builder/src/components/Header.tsx",["149"],"/Users/jan/defi/portfolio-builder/src/views/PortfolioDetail.tsx",["150"],"/Users/jan/defi/portfolio-builder/src/config/routes.ts",[],["151","152"],"/Users/jan/defi/portfolio-builder/src/services/getPortfolios.ts",[],"/Users/jan/defi/portfolio-builder/src/views/Routes.tsx",[],"/Users/jan/defi/portfolio-builder/src/components/Calculator.tsx",[],"/Users/jan/defi/portfolio-builder/src/utilities/formatters.ts",[],"/Users/jan/defi/portfolio-builder/src/components/ThemeButton.tsx",["153","154"],"import React, { FC, useState } from \"react\";\nimport { IconButton, PaletteType, Tooltip } from \"@material-ui/core\";\nimport Brightness4Icon from \"@material-ui/icons/Brightness4\";\nimport BrightnessHighIcon from \"@material-ui/icons/BrightnessHigh\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({}));\n\ninterface ThemeButtonProps {\n  setTheme: (theme: PaletteType) => void;\n  theme: PaletteType;\n}\n\nconst ThemeButton: FC<ThemeButtonProps> = ({ setTheme, theme }) => {\n  const classes = useStyles();\n\n  const toggleTheme = () => {\n    theme === \"dark\" ? setTheme(\"light\") : setTheme(\"dark\");\n  };\n\n  return (\n    <Tooltip title={`Switch to ${theme === \"dark\" ? \"light\" : \"dark\"} mode`}>\n      <IconButton color=\"inherit\" aria-label=\"back\" onClick={toggleTheme}>\n        {theme === \"dark\" ? <BrightnessHighIcon /> : <Brightness4Icon />}\n      </IconButton>\n    </Tooltip>\n  );\n};\n\nexport default ThemeButton;\n",["155","156"],"/Users/jan/defi/portfolio-builder/src/components/WalletConnectButton.tsx",["157","158"],"import { FC, useState, useEffect, useRef } from \"react\";\nimport { Button, CircularProgress } from \"@material-ui/core\";\nimport Web3Modal from \"web3modal\";\nimport Web3 from \"web3\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport Fortmatic from \"fortmatic\";\nimport Portis from \"@portis/web3\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { useStore, ConnectedWeb3, Message } from \"../store/store\";\nimport { networks } from \"../config/ethData\";\nimport { useBalances } from \"../hooks/useBalances\";\n\nconst useStyles = makeStyles((theme) => ({\n  wrapper: {\n    margin: theme.spacing(1),\n    position: \"relative\",\n  },\n  buttonProgress: {\n    color: \"#81c784\",\n    position: \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    marginTop: -12,\n    marginLeft: -12,\n  },\n}));\n\nconst providerOptions = {\n  walletconnect: {\n    package: WalletConnectProvider,\n    options: {\n      infuraId: process.env.REACT_APP_INFURA_ID,\n    },\n  },\n  fortmatic: {\n    package: Fortmatic,\n    options: {\n      key: process.env.REACT_APP_FORTMATIC_ID,\n    },\n  },\n  portis: {\n    package: Portis,\n    options: {\n      id: process.env.REACT_APP_PORTIS_ID,\n    },\n  },\n};\n\nconst web3ModalOptions = {\n  cacheProvider: false,\n  providerOptions,\n};\n\nconst web3ModalInstance = new Web3Modal(web3ModalOptions);\n\nconst WalletConnectButton: FC = () => {\n  const classes = useStyles();\n  const { state, dispatch } = useStore();\n  const { balances } = state;\n  const [loading, setLoading] = useState(false);\n  const [account, setAccount] = useState<string>(\"\");\n\n  useEffect(() => {\n    if (balances) {\n      setLoading(false);\n    }\n  }, [balances]);\n\n  const connetWallet = async () => {\n    setLoading(true);\n    try {\n      const provider = await web3ModalInstance.connect();\n      const web3 = new Web3(provider);\n      const accounts = await web3.eth.getAccounts();\n      const account = accounts[0];\n      const networkId = await web3.eth.net.getId();\n      const wallet = \"Metamask\";\n      const connectedWeb3: ConnectedWeb3 = {\n        web3,\n        account,\n        network: networks[networkId],\n        wallet,\n      };\n      //check for network\n      if (networks[networkId] != process.env.REACT_APP_ETHEREUM_NETWORK) {\n        const message: Message = {\n          type: \"error\",\n          text: `Wrong network! Please change your wallet to Kovan Test Network.`,\n        };\n        dispatch({ type: \"updateMessage\", message });\n        setLoading(false);\n      } else {\n        dispatch({ type: \"connectWeb3\", connectedWeb3 });\n        setAccount(account);\n      }\n    } catch (e) {\n      setLoading(false);\n    }\n  };\n\n  useBalances(account);\n\n  return (\n    <div className={classes.wrapper}>\n      <Button\n        variant=\"contained\"\n        color=\"secondary\"\n        onClick={connetWallet}\n        disabled={loading}\n      >\n        Connect Wallet\n      </Button>\n      {loading && (\n        <CircularProgress size={24} className={classes.buttonProgress} />\n      )}\n    </div>\n  );\n};\n\nexport default WalletConnectButton;\n","/Users/jan/defi/portfolio-builder/src/store/store.tsx",[],"/Users/jan/defi/portfolio-builder/src/components/GetPortfolioModal.tsx",["159","160"],"import { makeStyles } from \"@material-ui/core/styles\";\nimport {\n  Dialog,\n  DialogTitle,\n  Table,\n  TableHead,\n  TableBody,\n  TableRow,\n  TableCell,\n  Typography,\n  Grid,\n  Divider,\n  CircularProgress,\n} from \"@material-ui/core\";\nimport { FC, useEffect, useState } from \"react\";\nimport { Portfolio } from \"../sharedTypes/portfolios\";\nimport {\n  HistorcialPrices,\n  Token,\n  TokenAmounts,\n  UniswapAmounts,\n} from \"../sharedTypes/eth.types\";\nimport { contractsAddressesMap, tokens } from \"../config/ethData\";\nimport { useUniswap } from \"../hooks/useUniswap\";\nimport { useStore } from \"../store/store\";\nimport { formatPercentage, formatToUsd, native } from \"../utilities/formatters\";\nimport BigNumber from \"bignumber.js\";\nimport PortfolioBalancerV2 from \"../contracts/PortfolioBalancerV2.json\";\nimport { getGasPrices } from \"../services/getGasPrices\";\nimport { currentPrice, totalUsdBalance } from \"../utilities/calculations\";\nimport PurchaseButton from \"./PurchaseButton\";\nimport Help from \"./Help\";\n//import { usePrices } from \"../hooks/usePrices\";\n\nconst useStyles = makeStyles((theme) => ({\n  assetAllocation: {\n    backgroundColor: theme.palette.background.default,\n    padding: theme.spacing(2),\n  },\n  assetAllolcationTitle: {\n    paddingLeft: theme.spacing(2),\n  },\n\n  feeInfo: {\n    padding: theme.spacing(2, 4, 2, 4),\n  },\n  tokenContainer: {\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n  avatar: {\n    marginRight: theme.spacing(2),\n    height: 32,\n    width: 32,\n  },\n  spinner: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    padding: theme.spacing(10),\n  },\n  positive: {\n    color: \"#1cc760;\",\n  },\n  negative: {\n    color: \"#ff5050;\",\n  },\n}));\n\ninterface GetPortfolioModalProps {\n  open: boolean;\n  portfolio: Portfolio;\n  setModalOpen: (modalOpen: boolean) => void;\n}\n\nconst GetPortfolioModal: FC<GetPortfolioModalProps> = ({\n  open,\n  setModalOpen,\n  portfolio,\n}) => {\n  const classes = useStyles();\n  const { state } = useStore();\n  const { prices, balances, connectedWeb3 } = state;\n  const { web3, account, network } = connectedWeb3!;\n  const [ethFee, setEthFee] = useState<string | null>(null);\n  //const setUpdatePrices = usePrices();\n\n  const assets = Object.keys(tokens).filter(\n    (token) => portfolio.weights[token] > 0 && token !== \"ETH\"\n  ) as [Token];\n\n  let tradeAmounts = {} as TokenAmounts;\n  assets.forEach(\n    (token) =>\n      (tradeAmounts[token] = new BigNumber(balances!.ETH)\n        .times(portfolio.weights[token])\n        .toFixed(0))\n  );\n\n  const { uniswapAmounts, setUpdateUniswap } = useUniswap(tradeAmounts);\n\n  const slippage = (\n    ethAmount: string,\n    ethPrice: number,\n    tokenAmount: string,\n    tokenPrice: number\n  ): number => {\n    return (\n      Number(tokenAmount) * tokenPrice - (Number(ethAmount) / 1e18) * ethPrice\n    );\n  };\n\n  const totalSlippage = (\n    tradeAmounts: TokenAmounts,\n    uniswapAmounts: UniswapAmounts,\n    prices: HistorcialPrices,\n    ethFee: string\n  ): number => {\n    let coinSlippages = 0;\n    assets.forEach((token) => {\n      coinSlippages += slippage(\n        tradeAmounts[token],\n        currentPrice(prices, \"ETH\"),\n        uniswapAmounts[token].amountOutMin,\n        currentPrice(prices, token)\n      );\n    });\n    return coinSlippages + Number(ethFee);\n  };\n\n  const portfolioBalancer = new web3.eth.Contract(\n    PortfolioBalancerV2.abi as any,\n    contractsAddressesMap[network].PortfolioBalancer\n  );\n\n  const txInput = () => {\n    const tokenAddresses = assets.map(\n      (token) => contractsAddressesMap[network][native(token)]\n    );\n    const inputAmounts = assets.map((token) => tradeAmounts[token]);\n    const minOutAmounts = assets.map(\n      (token) => uniswapAmounts![token].amountOutMinRaw\n    );\n\n    const totalAmountETH = inputAmounts.reduce(\n      (a, b) => a.plus(b),\n      new BigNumber(0)\n    );\n\n    return [\n      tokenAddresses,\n      inputAmounts,\n      minOutAmounts,\n      totalAmountETH.toString(),\n    ];\n  };\n\n  // const sleep = (ms: number) => {\n  //   return new Promise((resolve) => {\n  //     setTimeout(resolve, ms);\n  //   });\n  // };\n\n  useEffect(() => {\n    // async function performUpdates() {\n    //   setUpdateUniswap(true);\n    //   await sleep(30000);\n    //   console.log(\"updating prices from comp\");\n    //   setUpdatePrices(true);\n    // }\n    // performUpdates();\n    setUpdateUniswap(true);\n  });\n\n  useEffect(() => {\n    const estimateFees = async () => {\n      const inputs = txInput();\n      try {\n        const gasFeeResults = Promise.all([\n          portfolioBalancer.methods\n            .rebalance(inputs[0], inputs[1], inputs[2])\n            .estimateGas({ from: account, value: inputs[3] }),\n          getGasPrices(),\n        ]);\n        const [gasfee, gasprices] = await gasFeeResults;\n        setEthFee(\n          new BigNumber(gasfee)\n            .times(gasprices.standard)\n            .dividedBy(1e20)\n            .times(currentPrice(prices!, \"ETH\"))\n            .times(-1)\n            .toString()\n        );\n      } catch (e) {\n        console.log(e);\n      }\n    };\n    if (uniswapAmounts && prices) {\n      estimateFees();\n    }\n  }, [uniswapAmounts, prices]);\n\n  return (\n    <Dialog open={open} onClose={() => setModalOpen(false)}>\n      {uniswapAmounts && prices && ethFee ? (\n        <>\n          <DialogTitle id=\"simple-dialog-title\">\n            <Grid container direction=\"row\" alignContent=\"flex-start\">\n              <Grid item>\n                {`Investment amount: ${formatToUsd(\n                  totalUsdBalance(balances!, prices)\n                )}`}\n              </Grid>\n              <Grid item>\n                <Help />\n              </Grid>\n            </Grid>\n          </DialogTitle>\n          <div className={classes.assetAllocation}>\n            <Typography className={classes.assetAllolcationTitle}>\n              Asset purchases\n            </Typography>\n            <Table>\n              <TableHead>\n                <TableRow>\n                  <TableCell>Token</TableCell>\n                  <TableCell align=\"right\">Amount</TableCell>\n                  <TableCell align=\"right\">Value</TableCell>\n                  <TableCell align=\"right\">Slippage</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {assets.map((token) => (\n                  <TableRow key={token}>\n                    <TableCell>\n                      <div className={classes.tokenContainer}>\n                        <img\n                          className={classes.avatar}\n                          src={`/tokens/${token}.png`}\n                        />\n                        <Typography variant=\"body1\">{token}</Typography>\n                      </div>\n                    </TableCell>\n                    <TableCell align=\"right\">\n                      {uniswapAmounts[token].amountOutMin}\n                    </TableCell>\n                    <TableCell align=\"right\">\n                      {formatToUsd(\n                        Number(uniswapAmounts[token].amountOutMin) *\n                          currentPrice(prices, token)\n                      )}\n                    </TableCell>\n                    <TableCell align=\"right\">\n                      <div\n                        className={\n                          slippage(\n                            tradeAmounts[token],\n                            currentPrice(prices, \"ETH\"),\n                            uniswapAmounts[token].amountOutMin,\n                            currentPrice(prices, token)\n                          ) >= 0\n                            ? classes.positive\n                            : classes.negative\n                        }\n                      >\n                        {formatToUsd(\n                          slippage(\n                            tradeAmounts[token],\n                            currentPrice(prices, \"ETH\"),\n                            uniswapAmounts[token].amountOutMin,\n                            currentPrice(prices, token)\n                          ),\n                          \"exceptZero\"\n                        )}\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n          <div className={classes.feeInfo}>\n            <Grid container>\n              <Grid item xs={8}>\n                <Typography variant=\"body1\" component=\"h2\" align=\"left\">\n                  Ethereum network fee\n                </Typography>\n              </Grid>\n              <Grid item xs={4}>\n                <Typography\n                  variant=\"body1\"\n                  component=\"h2\"\n                  align=\"right\"\n                  className={classes.negative}\n                >\n                  {formatToUsd(Number(ethFee))}\n                </Typography>\n              </Grid>\n              <Divider />\n              <Grid item xs={8}>\n                <Typography variant=\"body1\" component=\"h2\" align=\"left\">\n                  Total slippage\n                </Typography>\n              </Grid>\n              <Grid item xs={4}>\n                <Typography\n                  variant=\"body1\"\n                  component=\"h2\"\n                  align=\"right\"\n                  className={\n                    totalSlippage(\n                      tradeAmounts,\n                      uniswapAmounts,\n                      prices,\n                      ethFee\n                    ) >= 0\n                      ? classes.positive\n                      : classes.negative\n                  }\n                >\n                  {formatToUsd(\n                    totalSlippage(tradeAmounts, uniswapAmounts, prices, ethFee)\n                  )}\n                  (\n                  {formatPercentage(\n                    totalSlippage(\n                      tradeAmounts,\n                      uniswapAmounts,\n                      prices,\n                      ethFee\n                    ) / totalUsdBalance(balances!, prices),\n                    true\n                  )}\n                  )\n                </Typography>\n              </Grid>\n            </Grid>\n          </div>\n          <div className={classes.assetAllocation}>\n            <Grid\n              container\n              direction=\"column\"\n              justify=\"center\"\n              alignItems=\"center\"\n              spacing={2}\n            >\n              <Grid item xs={12}>\n                <PurchaseButton\n                  txInput={txInput()}\n                  portfolioBalancer={portfolioBalancer}\n                />\n              </Grid>\n            </Grid>\n          </div>\n        </>\n      ) : (\n        <div className={classes.spinner}>\n          <CircularProgress size={24} />\n        </div>\n      )}\n    </Dialog>\n  );\n};\n\nexport default GetPortfolioModal;\n","/Users/jan/defi/portfolio-builder/src/config/ethData.ts",[],"/Users/jan/defi/portfolio-builder/src/components/Web3Data.tsx",["161","162"],"import { FC, useEffect, useState } from \"react\";\nimport { useBalances } from \"../hooks/useBalances\";\nimport { useStore } from \"../store/store\";\nimport { usePrices } from \"../hooks/usePrices\";\nimport { getPortfolios } from \"../services/getPortfolios\";\n\nconst Web3Data: FC = () => {\n  const { state, dispatch } = useStore();\n  const setUpdatePrices = usePrices();\n  const [account, setAccount] = useState<string>(\"\");\n\n  //initial rendering\n  useEffect(() => {\n    const loadPortfolios = async () => {\n      const portfolios = await getPortfolios();\n      dispatch({ type: \"loadPortfolios\", portfolios });\n    };\n    setUpdatePrices(true);\n    loadPortfolios();\n  }, []);\n\n  useEffect(() => {\n    setUpdatePrices(true);\n    dispatch({ type: \"updateAccount\", account });\n  }, [account]);\n\n  window.ethereum.on(\"accountsChanged\", function (accounts: any) {\n    setAccount(accounts[0]);\n  });\n\n  useBalances(account);\n\n  console.log(\"state\", state);\n\n  return <div></div>;\n};\n\nexport default Web3Data;\n","/Users/jan/defi/portfolio-builder/src/services/getPrices.ts",[],"/Users/jan/defi/portfolio-builder/src/hooks/useUniswap.ts",["163"],"import { useEffect, useState } from \"react\";\nimport {\n  ChainId,\n  WETH,\n  Token as UniToken,\n  Trade,\n  TokenAmount,\n  Fetcher,\n  Route,\n  TradeType,\n  Percent,\n} from \"@uniswap/sdk\";\nimport { useStore } from \"../store/store\";\nimport { Token, TokenAmounts, UniswapAmounts } from \"../sharedTypes/eth.types\";\nimport { contractsAddressesMap, tokens } from \"../config/ethData\";\nimport { native } from \"../utilities/formatters\";\n\nexport const useUniswap = (tradeAmounts: TokenAmounts) => {\n  const { state } = useStore();\n  const { connectedWeb3 } = state;\n  const [uniswapAmounts, setUniswapAmounts] = useState<UniswapAmounts | null>();\n  const [updateUniswap, setUpdateUniswap] = useState(false);\n\n  useEffect(() => {\n    async function getUniswap() {\n      let amounts = {} as UniswapAmounts;\n      const chainId: ChainId = await connectedWeb3!.web3.eth.net.getId();\n      const { network } = connectedWeb3!;\n      const assets = Object.keys(tokens).filter(\n        (token) => token !== \"ETH\" && tradeAmounts[token as Token]\n      ) as [Token];\n\n      const tokenPromises = Promise.all(\n        assets.map((token) =>\n          Fetcher.fetchTokenData(\n            chainId,\n            contractsAddressesMap[network][native(token)]\n          )\n        )\n      );\n      const uniTokens: UniToken[] = await tokenPromises;\n\n      const pairPromises = Promise.all(\n        uniTokens.map((token) => Fetcher.fetchPairData(token, WETH[chainId]))\n      );\n      const pairs = await pairPromises;\n      const routes = pairs.map((pair) => new Route([pair], WETH[chainId]));\n\n      let i = 0;\n      for (const token of assets) {\n        const trade = new Trade(\n          routes[i],\n          new TokenAmount(WETH[chainId], tradeAmounts[token]),\n          TradeType.EXACT_INPUT\n        );\n\n        const slippageTolerance = new Percent(\"50\", \"10000\");\n        amounts[token] = {\n          executionPrice: trade.executionPrice.toSignificant(6),\n          amountOutMin: trade\n            .minimumAmountOut(slippageTolerance)\n            .toSignificant(6),\n          amountOutMinRaw: \"0\",\n        };\n\n        i++;\n      }\n      setUniswapAmounts(amounts);\n    }\n    if (updateUniswap) {\n      getUniswap();\n      setUpdateUniswap(false);\n    }\n  }, [updateUniswap]);\n  return { uniswapAmounts, setUpdateUniswap };\n};\n","/Users/jan/defi/portfolio-builder/src/hooks/useBalances.ts",["164","165"],"import { useEffect, useState } from \"react\";\nimport { useStore } from \"../store/store\";\nimport { tokens, contractsAddressesMap } from \"../config/ethData\";\nimport { TokenAmounts, Token } from \"../sharedTypes/eth.types\";\nimport ERC20 from \"../contracts/ERC20.json\";\n\nexport const useBalances = (account: string) => {\n  const { state, dispatch } = useStore();\n  const { connectedWeb3 } = state;\n  const [updateBalance, setUpdateBalance] = useState(false);\n  const { web3, network } = connectedWeb3 || {};\n\n  const getBalances = async () => {\n    const erc20TokenList = Object.keys(tokens).filter(\n      (token) => token !== \"ETH\"\n    ) as [Token];\n    const erc20Contracts = erc20TokenList.map(\n      (token) =>\n        new web3!.eth.Contract(\n          ERC20.abi as any,\n          contractsAddressesMap[network!][token]\n        )\n    );\n    const balancPromises = Promise.all(\n      erc20Contracts.map((contract) =>\n        contract.methods.balanceOf(account).call()\n      )\n    );\n    const balanceResults = await balancPromises;\n    let balances = {} as TokenAmounts;\n\n    let i = 0;\n    for (const token of erc20TokenList) {\n      balances[token] = balanceResults[i];\n      i++;\n    }\n    balances.ETH = await web3!.eth.getBalance(account!);\n    dispatch({ type: \"updateBalances\", balances });\n  };\n\n  useEffect(() => {\n    if (updateBalance) {\n      console.log(\"calling b inside update balances\");\n      getBalances();\n      setUpdateBalance(false);\n    }\n  }, [updateBalance]);\n\n  useEffect(() => {\n    if (account && web3 && network) {\n      getBalances();\n    }\n  }, [account]);\n\n  return setUpdateBalance;\n};\n","/Users/jan/defi/portfolio-builder/src/hooks/usePrices.ts",["166"],"/Users/jan/defi/portfolio-builder/src/components/WalletButton.tsx",[],"/Users/jan/defi/portfolio-builder/src/config/apis.ts",[],"/Users/jan/defi/portfolio-builder/src/services/getGasPrices.ts",[],"/Users/jan/defi/portfolio-builder/src/utilities/calculations.ts",[],"/Users/jan/defi/portfolio-builder/src/components/PurchaseButton.tsx",["167","168","169","170"],"import { FC, useState, useEffect, useRef } from \"react\";\nimport { Button, CircularProgress } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { useStore, Message } from \"../store/store\";\nimport { networks } from \"../config/ethData\";\nimport { useBalances } from \"../hooks/useBalances\";\nimport { useHistory } from \"react-router-dom\";\nimport { ROUTES } from \"../config/routes\";\n\ninterface PurchaseButtonProps {\n  txInput: any;\n  portfolioBalancer: any;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  wrapper: {\n    margin: theme.spacing(1),\n    position: \"relative\",\n  },\n  buttonProgress: {\n    color: \"#81c784\",\n    position: \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    marginTop: -12,\n    marginLeft: -12,\n  },\n}));\n\nconst PurchaseButton: FC<PurchaseButtonProps> = ({\n  txInput,\n  portfolioBalancer,\n}) => {\n  const classes = useStyles();\n  const { state, dispatch } = useStore();\n  const { connectedWeb3 } = state;\n  const history = useHistory();\n  const [loading, setLoading] = useState(false);\n  const setUpdateBalance = useBalances(connectedWeb3!.account);\n\n  const purchaseAssets = async () => {\n    setLoading(true);\n    try {\n      const result = await portfolioBalancer.methods\n        .rebalance(txInput[0], txInput[1], txInput[2])\n        .send({\n          from: connectedWeb3!.account,\n          value: txInput[3],\n          gas: \"700000\",\n          gasPrice: \"1000000000\",\n        });\n      setUpdateBalance(true);\n      const message = {\n        type: \"success\",\n        text:\n          \"Congratulation! You successfully purchased the portfolio! It might take a few seconds to update your assets.\",\n      } as Message;\n      dispatch({ type: \"updateMessage\", message });\n      history.push(ROUTES.DASHBOARD);\n      setLoading(false);\n    } catch (e) {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className={classes.wrapper}>\n      <Button\n        variant=\"contained\"\n        color=\"secondary\"\n        onClick={purchaseAssets}\n        disabled={loading}\n      >\n        Purchase assets\n      </Button>\n      {loading && (\n        <CircularProgress size={24} className={classes.buttonProgress} />\n      )}\n    </div>\n  );\n};\n\nexport default PurchaseButton;\n","/Users/jan/defi/portfolio-builder/src/views/Dashboard.tsx",["171","172","173","174"],"/Users/jan/defi/portfolio-builder/src/components/AssetTable.tsx",["175","176","177","178","179","180","181","182"],"import React, { useState } from \"react\";\nimport clsx from \"clsx\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport {\n  Card,\n  CardActions,\n  CardHeader,\n  CardContent,\n  Button,\n  Divider,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  Typography,\n  Avatar,\n} from \"@material-ui/core\";\nimport { useStore } from \"../store/store\";\nimport { Token } from \"../sharedTypes/eth.types\";\nimport { tokens } from \"../config/ethData\";\nimport {\n  currentPrice,\n  normalized,\n  totalUsdBalance,\n} from \"../utilities/calculations\";\nimport { formatPercentage, formatToUsd } from \"../utilities/formatters\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {},\n  card: { padding: 0 },\n  content: {\n    padding: theme.spacing(2),\n  },\n  tokenContainer: {\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n  avatar: {\n    marginRight: theme.spacing(2),\n    height: 32,\n    width: 32,\n  },\n}));\n\nconst AssetTable = () => {\n  const classes = useStyles();\n  const { state, dispatch } = useStore();\n  const { prices, balances, connectedWeb3 } = state;\n\n  const assets = Object.keys(balances!).filter(\n    (token) => balances![token as Token] !== \"0\"\n  ) as [Token];\n\n  const totalUsdAmount = totalUsdBalance(balances!, prices!);\n\n  return (\n    <Card className={classes.card}>\n      <CardHeader title=\"Assets\" />\n      <Divider />\n      <CardContent className={classes.content}>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>Token</TableCell>\n              <TableCell>Name</TableCell>\n              <TableCell>Asset class</TableCell>\n              <TableCell align=\"right\">Amount</TableCell>\n              <TableCell align=\"right\">Value</TableCell>\n              <TableCell align=\"right\">Allocation</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {assets.map((token: Token) => (\n              <TableRow key={token}>\n                <TableCell>\n                  <div className={classes.tokenContainer}>\n                    <img\n                      className={classes.avatar}\n                      src={`/tokens/${token}.png`}\n                    />\n                    <Typography variant=\"body1\">{token}</Typography>\n                  </div>\n                </TableCell>\n                <TableCell>{tokens[token as Token].name}</TableCell>\n                <TableCell>{tokens[token as Token].assetClass}</TableCell>\n                <TableCell align=\"right\">\n                  {normalized(balances![token], token)}\n                </TableCell>\n                <TableCell align=\"right\">\n                  {formatToUsd(\n                    Number(normalized(balances![token], token)) *\n                      currentPrice(prices!, token)\n                  )}\n                </TableCell>\n                <TableCell align=\"right\">\n                  {formatPercentage(\n                    (Number(normalized(balances![token], token)) *\n                      currentPrice(prices!, token)) /\n                      totalUsdAmount,\n                    true\n                  )}\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default AssetTable;\n","/Users/jan/defi/portfolio-builder/src/components/Message.tsx",[],["183","184"],"/Users/jan/defi/portfolio-builder/src/components/Help.tsx",[],{"ruleId":"185","severity":1,"message":"186","line":18,"column":10,"nodeType":"187","messageId":"188","endLine":18,"endColumn":20},{"ruleId":"185","severity":1,"message":"189","line":18,"column":22,"nodeType":"187","messageId":"188","endLine":18,"endColumn":35},{"ruleId":"190","replacedBy":"191"},{"ruleId":"192","replacedBy":"193"},{"ruleId":"190","replacedBy":"194"},{"ruleId":"192","replacedBy":"195"},{"ruleId":"190","replacedBy":"196"},{"ruleId":"192","replacedBy":"197"},{"ruleId":"185","severity":1,"message":"198","line":13,"column":14,"nodeType":"187","messageId":"188","endLine":13,"endColumn":22},{"ruleId":"199","severity":1,"message":"200","line":174,"column":25,"nodeType":"201","endLine":177,"endColumn":27},{"ruleId":"190","replacedBy":"202"},{"ruleId":"192","replacedBy":"203"},{"ruleId":"185","severity":1,"message":"198","line":1,"column":21,"nodeType":"187","messageId":"188","endLine":1,"endColumn":29},{"ruleId":"185","severity":1,"message":"204","line":15,"column":9,"nodeType":"187","messageId":"188","endLine":15,"endColumn":16},{"ruleId":"190","replacedBy":"205"},{"ruleId":"192","replacedBy":"206"},{"ruleId":"185","severity":1,"message":"207","line":1,"column":35,"nodeType":"187","messageId":"188","endLine":1,"endColumn":41},{"ruleId":"208","severity":1,"message":"209","line":85,"column":31,"nodeType":"210","messageId":"211","endLine":85,"endColumn":33},{"ruleId":"212","severity":1,"message":"213","line":201,"column":6,"nodeType":"214","endLine":201,"endColumn":30,"suggestions":"215"},{"ruleId":"199","severity":1,"message":"200","line":237,"column":25,"nodeType":"201","endLine":240,"endColumn":27},{"ruleId":"212","severity":1,"message":"216","line":20,"column":6,"nodeType":"214","endLine":20,"endColumn":8,"suggestions":"217"},{"ruleId":"212","severity":1,"message":"216","line":25,"column":6,"nodeType":"214","endLine":25,"endColumn":15,"suggestions":"218"},{"ruleId":"212","severity":1,"message":"219","line":74,"column":6,"nodeType":"214","endLine":74,"endColumn":21,"suggestions":"220"},{"ruleId":"212","severity":1,"message":"221","line":47,"column":6,"nodeType":"214","endLine":47,"endColumn":21,"suggestions":"222"},{"ruleId":"212","severity":1,"message":"223","line":53,"column":6,"nodeType":"214","endLine":53,"endColumn":15,"suggestions":"224"},{"ruleId":"212","severity":1,"message":"225","line":20,"column":6,"nodeType":"214","endLine":20,"endColumn":20,"suggestions":"226"},{"ruleId":"185","severity":1,"message":"227","line":1,"column":24,"nodeType":"187","messageId":"188","endLine":1,"endColumn":33},{"ruleId":"185","severity":1,"message":"207","line":1,"column":35,"nodeType":"187","messageId":"188","endLine":1,"endColumn":41},{"ruleId":"185","severity":1,"message":"228","line":5,"column":10,"nodeType":"187","messageId":"188","endLine":5,"endColumn":18},{"ruleId":"185","severity":1,"message":"229","line":44,"column":13,"nodeType":"187","messageId":"188","endLine":44,"endColumn":19},{"ruleId":"185","severity":1,"message":"198","line":1,"column":14,"nodeType":"187","messageId":"188","endLine":1,"endColumn":22},{"ruleId":"185","severity":1,"message":"227","line":1,"column":24,"nodeType":"187","messageId":"188","endLine":1,"endColumn":33},{"ruleId":"185","severity":1,"message":"230","line":9,"column":10,"nodeType":"187","messageId":"188","endLine":9,"endColumn":19},{"ruleId":"185","severity":1,"message":"231","line":11,"column":20,"nodeType":"187","messageId":"188","endLine":11,"endColumn":30},{"ruleId":"185","severity":1,"message":"198","line":1,"column":17,"nodeType":"187","messageId":"188","endLine":1,"endColumn":25},{"ruleId":"185","severity":1,"message":"232","line":2,"column":8,"nodeType":"187","messageId":"188","endLine":2,"endColumn":12},{"ruleId":"185","severity":1,"message":"233","line":6,"column":3,"nodeType":"187","messageId":"188","endLine":6,"endColumn":14},{"ruleId":"185","severity":1,"message":"234","line":9,"column":3,"nodeType":"187","messageId":"188","endLine":9,"endColumn":9},{"ruleId":"185","severity":1,"message":"235","line":17,"column":3,"nodeType":"187","messageId":"188","endLine":17,"endColumn":9},{"ruleId":"185","severity":1,"message":"236","line":48,"column":18,"nodeType":"187","messageId":"188","endLine":48,"endColumn":26},{"ruleId":"185","severity":1,"message":"237","line":49,"column":29,"nodeType":"187","messageId":"188","endLine":49,"endColumn":42},{"ruleId":"199","severity":1,"message":"200","line":78,"column":21,"nodeType":"201","endLine":81,"endColumn":23},{"ruleId":"190","replacedBy":"238"},{"ruleId":"192","replacedBy":"239"},"@typescript-eslint/no-unused-vars","'portfolios' is assigned a value but never used.","Identifier","unusedVar","'setPortfolios' is assigned a value but never used.","no-native-reassign",["240"],"no-negated-in-lhs",["241"],["240"],["241"],["240"],["241"],"'useState' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["240"],["241"],"'classes' is assigned a value but never used.",["240"],["241"],"'useRef' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'account', 'portfolioBalancer.methods', and 'txInput'. Either include them or remove the dependency array.","ArrayExpression",["242"],"React Hook useEffect has missing dependencies: 'dispatch' and 'setUpdatePrices'. Either include them or remove the dependency array.",["243"],["244"],"React Hook useEffect has missing dependencies: 'connectedWeb3' and 'tradeAmounts'. Either include them or remove the dependency array.",["245"],"React Hook useEffect has a missing dependency: 'getBalances'. Either include it or remove the dependency array.",["246"],"React Hook useEffect has missing dependencies: 'getBalances', 'network', and 'web3'. Either include them or remove the dependency array.",["247"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["248"],"'useEffect' is defined but never used.","'networks' is defined but never used.","'result' is assigned a value but never used.","'Portfolio' is defined but never used.","'useHistory' is defined but never used.","'clsx' is defined but never used.","'CardActions' is defined but never used.","'Button' is defined but never used.","'Avatar' is defined but never used.","'dispatch' is assigned a value but never used.","'connectedWeb3' is assigned a value but never used.",["240"],["241"],"no-global-assign","no-unsafe-negation",{"desc":"249","fix":"250"},{"desc":"251","fix":"252"},{"desc":"253","fix":"254"},{"desc":"255","fix":"256"},{"desc":"257","fix":"258"},{"desc":"259","fix":"260"},{"desc":"261","fix":"262"},"Update the dependencies array to be: [uniswapAmounts, prices, txInput, portfolioBalancer.methods, account]",{"range":"263","text":"264"},"Update the dependencies array to be: [dispatch, setUpdatePrices]",{"range":"265","text":"266"},"Update the dependencies array to be: [account, dispatch, setUpdatePrices]",{"range":"267","text":"268"},"Update the dependencies array to be: [connectedWeb3, tradeAmounts, updateUniswap]",{"range":"269","text":"270"},"Update the dependencies array to be: [getBalances, updateBalance]",{"range":"271","text":"272"},"Update the dependencies array to be: [account, getBalances, network, web3]",{"range":"273","text":"274"},"Update the dependencies array to be: [dispatch, updatePrices]",{"range":"275","text":"276"},[5139,5163],"[uniswapAmounts, prices, txInput, portfolioBalancer.methods, account]",[665,667],"[dispatch, setUpdatePrices]",[773,782],"[account, dispatch, setUpdatePrices]",[2232,2247],"[connectedWeb3, tradeAmounts, updateUniswap]",[1464,1479],"[getBalances, updateBalance]",[1573,1582],"[account, getBalances, network, web3]",[570,584],"[dispatch, updatePrices]"]
>>>>>>> master
