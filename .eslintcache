[{"/Users/jan/defi/portfolio-builder/src/App.tsx":"1","/Users/jan/defi/portfolio-builder/src/index.tsx":"2","/Users/jan/defi/portfolio-builder/src/reportWebVitals.ts":"3","/Users/jan/defi/portfolio-builder/src/views/Portfolios.tsx":"4","/Users/jan/defi/portfolio-builder/src/components/Footer.tsx":"5","/Users/jan/defi/portfolio-builder/src/components/Header.tsx":"6","/Users/jan/defi/portfolio-builder/src/views/PortfolioDetail.tsx":"7","/Users/jan/defi/portfolio-builder/src/config/routes.ts":"8","/Users/jan/defi/portfolio-builder/src/services/getPortfolios.ts":"9","/Users/jan/defi/portfolio-builder/src/views/Routes.tsx":"10","/Users/jan/defi/portfolio-builder/src/components/Calculator.tsx":"11","/Users/jan/defi/portfolio-builder/src/utilities/formatters.ts":"12","/Users/jan/defi/portfolio-builder/src/components/ThemeButton.tsx":"13","/Users/jan/defi/portfolio-builder/src/components/WalletConnectButton.tsx":"14","/Users/jan/defi/portfolio-builder/src/store/store.tsx":"15","/Users/jan/defi/portfolio-builder/src/components/GetPortfolioModal.tsx":"16","/Users/jan/defi/portfolio-builder/src/config/ethData.ts":"17","/Users/jan/defi/portfolio-builder/src/components/Web3Data.tsx":"18","/Users/jan/defi/portfolio-builder/src/services/getPrices.ts":"19","/Users/jan/defi/portfolio-builder/src/hooks/useUniswap.ts":"20","/Users/jan/defi/portfolio-builder/src/hooks/useBalances.ts":"21","/Users/jan/defi/portfolio-builder/src/hooks/usePrices.ts":"22","/Users/jan/defi/portfolio-builder/src/components/WalletButton.tsx":"23","/Users/jan/defi/portfolio-builder/src/config/apis.ts":"24","/Users/jan/defi/portfolio-builder/src/services/getGasPrices.ts":"25","/Users/jan/defi/portfolio-builder/src/utilities/calculations.ts":"26","/Users/jan/defi/portfolio-builder/src/components/PurchaseButton.tsx":"27","/Users/jan/defi/portfolio-builder/src/views/Dashboard.tsx":"28","/Users/jan/defi/portfolio-builder/src/components/AssetTable.tsx":"29","/Users/jan/defi/portfolio-builder/src/components/Message.tsx":"30"},{"size":1520,"mtime":1616819816651,"results":"31","hashOfConfig":"32"},{"size":500,"mtime":1611439717839,"results":"33","hashOfConfig":"32"},{"size":425,"mtime":1611439717841,"results":"34","hashOfConfig":"32"},{"size":8019,"mtime":1616820376248,"results":"35","hashOfConfig":"32"},{"size":1204,"mtime":1615023103778,"results":"36","hashOfConfig":"32"},{"size":1876,"mtime":1616234547055,"results":"37","hashOfConfig":"32"},{"size":9007,"mtime":1616648487204,"results":"38","hashOfConfig":"32"},{"size":109,"mtime":1616626482249,"results":"39","hashOfConfig":"32"},{"size":279,"mtime":1615419755388,"results":"40","hashOfConfig":"32"},{"size":624,"mtime":1616819905764,"results":"41","hashOfConfig":"32"},{"size":3496,"mtime":1613601828684,"results":"42","hashOfConfig":"32"},{"size":1151,"mtime":1616061913493,"results":"43","hashOfConfig":"32"},{"size":953,"mtime":1614417211062,"results":"44","hashOfConfig":"32"},{"size":3070,"mtime":1616834274743,"results":"45","hashOfConfig":"32"},{"size":2480,"mtime":1616819393616,"results":"46","hashOfConfig":"32"},{"size":8876,"mtime":1616665254840,"results":"47","hashOfConfig":"32"},{"size":1658,"mtime":1616463606021,"results":"48","hashOfConfig":"32"},{"size":997,"mtime":1616834670070,"results":"49","hashOfConfig":"32"},{"size":825,"mtime":1616543584873,"results":"50","hashOfConfig":"32"},{"size":2300,"mtime":1616541152397,"results":"51","hashOfConfig":"32"},{"size":1591,"mtime":1616817879434,"results":"52","hashOfConfig":"32"},{"size":643,"mtime":1616461130702,"results":"53","hashOfConfig":"32"},{"size":3641,"mtime":1616234638854,"results":"54","hashOfConfig":"32"},{"size":246,"mtime":1616468189744,"results":"55","hashOfConfig":"32"},{"size":438,"mtime":1616491732164,"results":"56","hashOfConfig":"32"},{"size":740,"mtime":1616640842857,"results":"57","hashOfConfig":"32"},{"size":2226,"mtime":1616820550209,"results":"58","hashOfConfig":"32"},{"size":1818,"mtime":1616818941527,"results":"59","hashOfConfig":"32"},{"size":3186,"mtime":1616646334417,"results":"60","hashOfConfig":"32"},{"size":1104,"mtime":1616648806731,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1765l6l",{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"81"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"72"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"72"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"81"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"72"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},"/Users/jan/defi/portfolio-builder/src/App.tsx",["135","136","137","138"],"/Users/jan/defi/portfolio-builder/src/index.tsx",[],["139","140"],"/Users/jan/defi/portfolio-builder/src/reportWebVitals.ts",[],["141","142"],"/Users/jan/defi/portfolio-builder/src/views/Portfolios.tsx",[],["143","144"],"/Users/jan/defi/portfolio-builder/src/components/Footer.tsx",[],"/Users/jan/defi/portfolio-builder/src/components/Header.tsx",["145"],"import {\n  AppBar,\n  Toolbar,\n  Typography,\n  IconButton,\n  PaletteType,\n} from \"@material-ui/core\";\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { ROUTES } from \"../config/routes\";\nimport ThemeButton from \"./ThemeButton\";\nimport { FC, useState } from \"react\";\nimport WalletConnectButton from \"./WalletConnectButton\";\nimport WalletButton from \"./WalletButton\";\nimport { useStore } from \"../store/store\";\n\nconst useStyles = makeStyles((theme) => ({\n  icon: {\n    marginRight: theme.spacing(2),\n  },\n  logo: {\n    maxWidth: 60,\n    marginLeft: theme.spacing(2),\n  },\n  flexGrow: {\n    flexGrow: 1,\n  },\n}));\n\ninterface HeaderProps {\n  setTheme: (theme: PaletteType) => void;\n  theme: PaletteType;\n}\n\nconst Header: FC<HeaderProps> = ({ setTheme, theme }) => {\n  const classes = useStyles();\n  const history = useHistory();\n  const location = useLocation();\n  const { state } = useStore();\n  const { balances, connectedWeb3 } = state;\n\n  return (\n    <AppBar position=\"static\">\n      <Toolbar>\n        {location.pathname === ROUTES.PORTFOLIO && (\n          <IconButton\n            edge=\"start\"\n            className={classes.icon}\n            color=\"inherit\"\n            aria-label=\"back\"\n            onClick={() => history.goBack()}\n          >\n            <ArrowBackIcon />\n          </IconButton>\n        )}\n        <Typography align=\"left\" variant=\"h4\" color=\"inherit\" noWrap>\n          Cantillon\n        </Typography>\n        <img alt=\"Logo\" className={classes.logo} src=\"/images/Logo.png\" />\n        <div className={classes.flexGrow} />\n        {connectedWeb3 && balances ? <WalletButton /> : <WalletConnectButton />}\n        <ThemeButton setTheme={setTheme} theme={theme} />\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nexport default Header;\n","/Users/jan/defi/portfolio-builder/src/views/PortfolioDetail.tsx",["146"],"import { useEffect, useState } from \"react\";\nimport {\n  Container,\n  Grid,\n  Typography,\n  Table,\n  TableHead,\n  TableRow,\n  TableCell,\n  Card,\n  CardMedia,\n  TableBody,\n  Link,\n  Button,\n} from \"@material-ui/core\";\nimport Calculator from \"../components/Calculator\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Portfolio, Weights } from \"../sharedTypes/portfolios\";\nimport { Token } from \"../sharedTypes/eth.types\";\nimport { useLocation } from \"react-router-dom\";\nimport { formatPercentage } from \"../utilities/formatters\";\nimport GetPortfolioModal from \"../components/GetPortfolioModal\";\n\nimport { tokens } from \"../config/ethData\";\nimport { Message, useStore } from \"../store/store\";\nimport WalletConnectButton from \"../components/WalletConnectButton\";\n\nconst useStyles = makeStyles((theme) => ({\n  icon: {\n    marginRight: theme.spacing(2),\n  },\n  heroContent: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(8, 0, 6),\n  },\n  assetAllocation: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(4, 0, 4),\n  },\n  overview: {\n    paddingTop: theme.spacing(4),\n    paddingBottom: theme.spacing(4),\n  },\n  card: {\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n  cardMedia: {\n    paddingTop: \"56.25%\", // 16:9\n  },\n  cardContent: {\n    flexGrow: 1,\n  },\n  bold: {\n    fontWeight: 600,\n  },\n  tokenContainer: {\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n  avatar: {\n    marginRight: theme.spacing(2),\n    height: 32,\n    width: 32,\n  },\n  margin: {\n    margin: theme.spacing(1),\n  },\n}));\n\ninterface PortfolioDetailState {\n  portfolio: Portfolio;\n}\n\nconst PortfolioDetail = () => {\n  const classes = useStyles();\n  const location = useLocation<PortfolioDetailState>();\n  const { portfolio } = location.state;\n  const { state, dispatch } = useStore();\n  const { connectedWeb3, balances } = state;\n  const [modalOpen, setModalOpen] = useState(false);\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, []);\n\n  const handeleGetPortfolio = () => {\n    if (balances?.ETH === \"0\") {\n      const message = {\n        type: \"error\",\n        text:\n          \"Youn need to fund your wallet with ETH before you can get this portfolio\",\n      } as Message;\n      dispatch({ type: \"updateMessage\", message });\n    } else {\n      setModalOpen(true);\n    }\n  };\n\n  return (\n    <main>\n      {/* Hero unit */}\n      <div className={classes.heroContent}>\n        <Container maxWidth=\"md\">\n          <Grid container spacing={4} direction=\"row\" alignItems=\"center\">\n            <Grid container item xs={6}>\n              <Typography\n                component=\"h1\"\n                variant=\"h2\"\n                align=\"center\"\n                color=\"textPrimary\"\n                gutterBottom\n              >\n                {portfolio.name} Portfolio\n              </Typography>\n            </Grid>\n            <Grid item xs={6}>\n              <Card>\n                <CardMedia\n                  className={classes.cardMedia}\n                  image={`/images/Portfolio_${portfolio.id}.jpg`}\n                  title=\"Image title\"\n                />\n              </Card>\n            </Grid>\n          </Grid>\n        </Container>\n      </div>\n      <Container className={classes.overview} maxWidth=\"md\">\n        {/* End hero unit */}\n        <Typography\n          component=\"h2\"\n          variant=\"h4\"\n          color=\"textPrimary\"\n          gutterBottom\n        >\n          Portfolio overview\n        </Typography>\n        <Typography variant=\"body1\" color=\"textPrimary\" gutterBottom>\n          {portfolio.description}\n        </Typography>\n      </Container>\n      <div className={classes.assetAllocation}>\n        <Container maxWidth=\"md\">\n          {/* End hero unit */}\n          <Typography\n            component=\"h2\"\n            variant=\"h4\"\n            color=\"textPrimary\"\n            gutterBottom\n          >\n            Asset allocation\n          </Typography>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>Token</TableCell>\n                <TableCell>Name</TableCell>\n                <TableCell>Asset class</TableCell>\n                <TableCell align=\"right\">Allocation</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {Object.keys(tokens).map((token: string) => (\n                <TableRow key={token}>\n                  <TableCell>\n                    <div className={classes.tokenContainer}>\n                      <img\n                        className={classes.avatar}\n                        src={`/tokens/${token}.png`}\n                      />\n                      <Typography variant=\"body1\">{token}</Typography>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    {\" \"}\n                    <Link href={tokens[token as Token].link} target=\"_blank\">\n                      {tokens[token as Token].name}\n                    </Link>\n                  </TableCell>\n                  <TableCell>{tokens[token as Token].assetClass}</TableCell>\n                  <TableCell align=\"right\">\n                    {formatPercentage(\n                      portfolio.weights[token as keyof Weights]\n                    )}\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </Container>\n      </div>\n      <Container className={classes.overview} maxWidth=\"md\">\n        {/* End hero unit */}\n        <Typography\n          component=\"h2\"\n          variant=\"h4\"\n          color=\"textPrimary\"\n          gutterBottom\n        >\n          Performance\n        </Typography>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell></TableCell>\n              <TableCell>1 Year</TableCell>\n              <TableCell>3 Years</TableCell>\n              <TableCell>5 Years</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            <TableRow>\n              <TableCell>Total Return</TableCell>\n              <TableCell>\n                {formatPercentage(portfolio.year1.totalReturn)}\n              </TableCell>\n              <TableCell>\n                {formatPercentage(portfolio.year3.totalReturn)}\n              </TableCell>\n              <TableCell>\n                {formatPercentage(portfolio.year5.totalReturn)}\n              </TableCell>\n            </TableRow>\n            <TableRow>\n              <TableCell>Annualized Return (APY)</TableCell>\n              <TableCell>{formatPercentage(portfolio.year1.apy)}</TableCell>\n              <TableCell>{formatPercentage(portfolio.year3.apy)}</TableCell>\n              <TableCell>{formatPercentage(portfolio.year5.apy)}</TableCell>\n            </TableRow>\n            <TableRow>\n              <TableCell>Best 12 months</TableCell>\n              <TableCell>\n                {formatPercentage(portfolio.year1.best12Months)}\n              </TableCell>\n              <TableCell>\n                {formatPercentage(portfolio.year3.best12Months)}\n              </TableCell>\n              <TableCell>\n                {formatPercentage(portfolio.year5.best12Months)}\n              </TableCell>\n            </TableRow>\n            <TableRow>\n              <TableCell>Worst 12 months</TableCell>\n              <TableCell>\n                {formatPercentage(portfolio.year1.worst12Months)}\n              </TableCell>\n              <TableCell>\n                {formatPercentage(portfolio.year3.worst12Months)}\n              </TableCell>\n              <TableCell>\n                {formatPercentage(portfolio.year5.worst12Months)}\n              </TableCell>\n            </TableRow>\n          </TableBody>\n        </Table>\n      </Container>\n      <Calculator portfolio={portfolio} />\n      <Container className={classes.overview} maxWidth=\"md\">\n        <Grid\n          container\n          direction=\"column\"\n          justify=\"center\"\n          alignItems=\"center\"\n          spacing={2}\n        >\n          {connectedWeb3 && balances ? (\n            <>\n              <Grid item xs={12}>\n                <Button\n                  size=\"large\"\n                  color=\"primary\"\n                  variant=\"contained\"\n                  onClick={handeleGetPortfolio}\n                >\n                  Get this portfolio\n                </Button>\n              </Grid>\n              <GetPortfolioModal\n                open={modalOpen}\n                setModalOpen={setModalOpen}\n                portfolio={portfolio}\n              />\n            </>\n          ) : (\n            <>\n              <Grid item xs={12}>\n                <Typography>\n                  Please connect a wallet, if you want to get this portfolio{\" \"}\n                </Typography>\n              </Grid>\n              <Grid item xs={12}>\n                <WalletConnectButton />\n              </Grid>\n            </>\n          )}\n        </Grid>\n      </Container>\n    </main>\n  );\n};\n\nexport default PortfolioDetail;\n",["147","148"],"/Users/jan/defi/portfolio-builder/src/config/routes.ts",[],"/Users/jan/defi/portfolio-builder/src/services/getPortfolios.ts",[],"/Users/jan/defi/portfolio-builder/src/views/Routes.tsx",[],"/Users/jan/defi/portfolio-builder/src/components/Calculator.tsx",[],"/Users/jan/defi/portfolio-builder/src/utilities/formatters.ts",[],["149","150"],"/Users/jan/defi/portfolio-builder/src/components/ThemeButton.tsx",["151","152"],"import React, { FC, useState } from \"react\";\nimport { IconButton, PaletteType, Tooltip } from \"@material-ui/core\";\nimport Brightness4Icon from \"@material-ui/icons/Brightness4\";\nimport BrightnessHighIcon from \"@material-ui/icons/BrightnessHigh\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({}));\n\ninterface ThemeButtonProps {\n  setTheme: (theme: PaletteType) => void;\n  theme: PaletteType;\n}\n\nconst ThemeButton: FC<ThemeButtonProps> = ({ setTheme, theme }) => {\n  const classes = useStyles();\n\n  const toggleTheme = () => {\n    theme === \"dark\" ? setTheme(\"light\") : setTheme(\"dark\");\n  };\n\n  return (\n    <Tooltip title={`Switch to ${theme === \"dark\" ? \"light\" : \"dark\"} mode`}>\n      <IconButton color=\"inherit\" aria-label=\"back\" onClick={toggleTheme}>\n        {theme === \"dark\" ? <BrightnessHighIcon /> : <Brightness4Icon />}\n      </IconButton>\n    </Tooltip>\n  );\n};\n\nexport default ThemeButton;\n","/Users/jan/defi/portfolio-builder/src/components/WalletConnectButton.tsx",["153","154"],"/Users/jan/defi/portfolio-builder/src/store/store.tsx",[],"/Users/jan/defi/portfolio-builder/src/components/GetPortfolioModal.tsx",["155","156","157","158"],"import { makeStyles } from \"@material-ui/core/styles\";\nimport {\n  Dialog,\n  DialogTitle,\n  Table,\n  TableHead,\n  TableBody,\n  TableRow,\n  TableCell,\n  Typography,\n  Grid,\n  Divider,\n  CircularProgress,\n  Button,\n} from \"@material-ui/core\";\nimport { FC, useEffect, useState } from \"react\";\nimport { Portfolio } from \"../sharedTypes/portfolios\";\nimport { Token, TokenAmounts, UniswapAmounts } from \"../sharedTypes/eth.types\";\nimport { contractsAddressesMap, tokens } from \"../config/ethData\";\nimport { useUniswap } from \"../hooks/useUniswap\";\nimport { useStore } from \"../store/store\";\nimport { formatToUsd, native } from \"../utilities/formatters\";\nimport BigNumber from \"bignumber.js\";\nimport PortfolioBalancerV2 from \"../contracts/PortfolioBalancerV2.json\";\nimport { getGasPrices } from \"../services/getGasPrices\";\nimport { totalUsdBalance } from \"../utilities/calculations\";\nimport PurchaseButton from \"./PurchaseButton\";\nimport { useHistory } from \"react-router-dom\";\n//import { usePrices } from \"../hooks/usePrices\";\n\nconst useStyles = makeStyles((theme) => ({\n  assetAllocation: {\n    backgroundColor: theme.palette.background.default,\n    padding: theme.spacing(2),\n  },\n  assetAllolcationTitle: {\n    paddingLeft: theme.spacing(2),\n  },\n\n  feeInfo: {\n    padding: theme.spacing(2, 4, 2, 4),\n  },\n  tokenContainer: {\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n  avatar: {\n    marginRight: theme.spacing(2),\n    height: 32,\n    width: 32,\n  },\n  spinner: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    padding: theme.spacing(10),\n  },\n}));\n\ninterface GetPortfolioModalProps {\n  open: boolean;\n  portfolio: Portfolio;\n  setModalOpen: (modalOpen: boolean) => void;\n}\n\nconst GetPortfolioModal: FC<GetPortfolioModalProps> = ({\n  open,\n  setModalOpen,\n  portfolio,\n}) => {\n  const classes = useStyles();\n  const { state } = useStore();\n  const { prices, balances, connectedWeb3 } = state;\n  const { web3, account, network } = connectedWeb3!;\n  const [ethFee, setEthFee] = useState<string | null>(null);\n  //const setUpdatePrices = usePrices();\n\n  const assets = Object.keys(tokens).filter(\n    (token) => portfolio.weights[token] > 0 && token !== \"ETH\"\n  ) as [Token];\n\n  let tradeAmounts = {} as TokenAmounts;\n  assets.forEach(\n    (token) =>\n      (tradeAmounts[token] = new BigNumber(balances!.ETH)\n        .times(portfolio.weights[token])\n        .toFixed(0))\n  );\n\n  const { uniswapAmounts, setUpdateUniswap } = useUniswap(tradeAmounts);\n\n  const slippage = (\n    ethAmount: string,\n    ethPrice: string,\n    tokenAmount: string,\n    tokenPrice: string\n  ): number => {\n    return (\n      Number(tokenAmount) * Number(tokenPrice) -\n      (Number(ethAmount) / 1e18) * Number(ethPrice)\n    );\n  };\n\n  const totalSlippage = (\n    tradeAmounts: TokenAmounts,\n    uniswapAmounts: UniswapAmounts,\n    prices: TokenAmounts,\n    ethFee: string\n  ): number => {\n    let coinSlippages = 0;\n    assets.forEach((token) => {\n      coinSlippages += slippage(\n        tradeAmounts[token],\n        prices.ETH,\n        uniswapAmounts[token].amountOutMin,\n        prices[token]\n      );\n    });\n    return coinSlippages - Number(ethFee);\n  };\n\n  const portfolioBalancer = new web3.eth.Contract(\n    PortfolioBalancerV2.abi as any,\n    contractsAddressesMap[network].PortfolioBalancer\n  );\n\n  const txInput = () => {\n    const tokenAddresses = assets.map(\n      (token) => contractsAddressesMap[network][native(token)]\n    );\n    const inputAmounts = assets.map((token) => tradeAmounts[token]);\n    const minOutAmounts = assets.map(\n      (token) => uniswapAmounts![token].amountOutMinRaw\n    );\n\n    const totalAmountETH = inputAmounts.reduce(\n      (a, b) => Number(a) + Number(b),\n      0\n    );\n\n    return [\n      tokenAddresses,\n      inputAmounts,\n      minOutAmounts,\n      totalAmountETH.toFixed(0),\n    ];\n  };\n\n  // const sleep = (ms: number) => {\n  //   return new Promise((resolve) => {\n  //     setTimeout(resolve, ms);\n  //   });\n  // };\n\n  useEffect(() => {\n    // async function performUpdates() {\n    //   setUpdateUniswap(true);\n    //   await sleep(30000);\n    //   console.log(\"updating prices from comp\");\n    //   setUpdatePrices(true);\n    // }\n    // performUpdates();\n    setUpdateUniswap(true);\n  });\n\n  useEffect(() => {\n    const estimateFees = async () => {\n      const inputs = txInput();\n      try {\n        const gasFeeResults = Promise.all([\n          portfolioBalancer.methods\n            .rebalance(inputs[0], inputs[1], inputs[2])\n            .estimateGas({ from: account, value: inputs[3] }),\n          getGasPrices(),\n        ]);\n        const [gasfee, gasprices] = await gasFeeResults;\n        setEthFee(\n          new BigNumber(gasfee)\n            .times(gasprices.standard)\n            .dividedBy(1e20)\n            .times(prices!.ETH)\n            .toString()\n        );\n      } catch (e) {\n        console.log(e);\n      }\n    };\n    if (uniswapAmounts && prices) {\n      estimateFees();\n    }\n  }, [uniswapAmounts, prices]);\n\n  return (\n    <Dialog open={open} onClose={() => setModalOpen(false)}>\n      {uniswapAmounts && prices && ethFee ? (\n        <>\n          <DialogTitle id=\"simple-dialog-title\">{`Investment amount: ${formatToUsd(\n            totalUsdBalance(balances!, prices)\n          )}`}</DialogTitle>\n          <div className={classes.assetAllocation}>\n            <Typography className={classes.assetAllolcationTitle}>\n              Asset purchases\n            </Typography>\n            <Table>\n              <TableHead>\n                <TableRow>\n                  <TableCell>Token</TableCell>\n                  <TableCell align=\"right\">Amount</TableCell>\n                  <TableCell align=\"right\">Value</TableCell>\n                  <TableCell align=\"right\">Slippage</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {assets.map((token) => (\n                  <TableRow key={token}>\n                    <TableCell>\n                      <div className={classes.tokenContainer}>\n                        <img\n                          className={classes.avatar}\n                          src={`/tokens/${token}.png`}\n                        />\n                        <Typography variant=\"body1\">{token}</Typography>\n                      </div>\n                    </TableCell>\n                    <TableCell align=\"right\">\n                      {uniswapAmounts[token].amountOutMin}\n                    </TableCell>\n                    <TableCell>\n                      {formatToUsd(\n                        Number(uniswapAmounts[token].amountOutMin) *\n                          Number(prices[token])\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      {formatToUsd(\n                        slippage(\n                          tradeAmounts[token],\n                          prices.ETH,\n                          uniswapAmounts[token].amountOutMin,\n                          prices[token]\n                        )\n                      )}\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n          <div className={classes.feeInfo}>\n            <Grid container>\n              <Grid item xs={8}>\n                <Typography variant=\"body1\" component=\"h2\" align=\"left\">\n                  Ethereum network fee\n                </Typography>\n              </Grid>\n              <Grid item xs={4}>\n                <Typography variant=\"body1\" component=\"h2\" align=\"right\">\n                  {formatToUsd(Number(ethFee))}\n                </Typography>\n              </Grid>\n              <Divider />\n              <Grid item xs={8}>\n                <Typography variant=\"body1\" component=\"h2\" align=\"left\">\n                  Total slippage\n                </Typography>\n              </Grid>\n              <Grid item xs={4}>\n                <Typography variant=\"body1\" component=\"h2\" align=\"right\">\n                  {formatToUsd(\n                    totalSlippage(tradeAmounts, uniswapAmounts, prices, ethFee)\n                  )}\n                </Typography>\n              </Grid>\n            </Grid>\n          </div>\n          <div className={classes.assetAllocation}>\n            <Grid\n              container\n              direction=\"column\"\n              justify=\"center\"\n              alignItems=\"center\"\n              spacing={2}\n            >\n              <Grid item xs={12}>\n                <PurchaseButton\n                  txInput={txInput()}\n                  portfolioBalancer={portfolioBalancer}\n                />\n              </Grid>\n            </Grid>\n          </div>\n        </>\n      ) : (\n        <div className={classes.spinner}>\n          <CircularProgress size={24} />\n        </div>\n      )}\n    </Dialog>\n  );\n};\n\nexport default GetPortfolioModal;\n","/Users/jan/defi/portfolio-builder/src/config/ethData.ts",[],"/Users/jan/defi/portfolio-builder/src/components/Web3Data.tsx",["159","160"],"/Users/jan/defi/portfolio-builder/src/services/getPrices.ts",[],"/Users/jan/defi/portfolio-builder/src/hooks/useUniswap.ts",["161"],"import { useEffect, useState } from \"react\";\nimport {\n  ChainId,\n  WETH,\n  Token as UniToken,\n  Trade,\n  TokenAmount,\n  Fetcher,\n  Route,\n  TradeType,\n  Percent,\n} from \"@uniswap/sdk\";\nimport { useStore } from \"../store/store\";\nimport { Token, TokenAmounts, UniswapAmounts } from \"../sharedTypes/eth.types\";\nimport { contractsAddressesMap, tokens } from \"../config/ethData\";\nimport { native } from \"../utilities/formatters\";\n\nexport const useUniswap = (tradeAmounts: TokenAmounts) => {\n  const { state } = useStore();\n  const { connectedWeb3 } = state;\n  const [uniswapAmounts, setUniswapAmounts] = useState<UniswapAmounts | null>();\n  const [updateUniswap, setUpdateUniswap] = useState(false);\n\n  useEffect(() => {\n    async function getUniswap() {\n      let amounts = {} as UniswapAmounts;\n      const chainId: ChainId = await connectedWeb3!.web3.eth.net.getId();\n      const { network } = connectedWeb3!;\n      const assets = Object.keys(tokens).filter(\n        (token) => token !== \"ETH\" && tradeAmounts[token as Token]\n      ) as [Token];\n\n      const tokenPromises = Promise.all(\n        assets.map((token) =>\n          Fetcher.fetchTokenData(\n            chainId,\n            contractsAddressesMap[network][native(token)]\n          )\n        )\n      );\n      const uniTokens: UniToken[] = await tokenPromises;\n\n      const pairPromises = Promise.all(\n        uniTokens.map((token) => Fetcher.fetchPairData(token, WETH[chainId]))\n      );\n      const pairs = await pairPromises;\n      const routes = pairs.map((pair) => new Route([pair], WETH[chainId]));\n\n      let i = 0;\n      for (const token of assets) {\n        const trade = new Trade(\n          routes[i],\n          new TokenAmount(WETH[chainId], tradeAmounts[token]),\n          TradeType.EXACT_INPUT\n        );\n\n        const slippageTolerance = new Percent(\"50\", \"10000\");\n        amounts[token] = {\n          executionPrice: trade.executionPrice.toSignificant(6),\n          amountOutMin: trade\n            .minimumAmountOut(slippageTolerance)\n            .toSignificant(6),\n          amountOutMinRaw: \"0\",\n        };\n\n        i++;\n      }\n      setUniswapAmounts(amounts);\n    }\n    if (updateUniswap) {\n      getUniswap();\n      setUpdateUniswap(false);\n    }\n  }, [updateUniswap]);\n  return { uniswapAmounts, setUpdateUniswap };\n};\n","/Users/jan/defi/portfolio-builder/src/hooks/useBalances.ts",["162","163"],"/Users/jan/defi/portfolio-builder/src/hooks/usePrices.ts",["164"],"import { useEffect, useState } from \"react\";\nimport { useStore } from \"../store/store\";\nimport { TokenAmounts } from \"../sharedTypes/eth.types\";\nimport { getPrices } from \"../services/getPrices\";\n\nexport const usePrices = () => {\n  const { dispatch } = useStore();\n  const [updatePrices, setUpdatePrices] = useState(false);\n\n  useEffect(() => {\n    async function updatePrices() {\n      let prices = {} as TokenAmounts;\n      prices = await getPrices();\n      dispatch({ type: \"updatePrices\", prices });\n    }\n    if (updatePrices) {\n      updatePrices();\n      setUpdatePrices(false);\n    }\n  }, [updatePrices]);\n  return setUpdatePrices;\n};\n","/Users/jan/defi/portfolio-builder/src/components/WalletButton.tsx",[],"/Users/jan/defi/portfolio-builder/src/config/apis.ts",[],"/Users/jan/defi/portfolio-builder/src/services/getGasPrices.ts",[],"/Users/jan/defi/portfolio-builder/src/utilities/calculations.ts",[],"/Users/jan/defi/portfolio-builder/src/components/PurchaseButton.tsx",["165","166","167","168"],"import { FC, useState, useEffect, useRef } from \"react\";\nimport { Button, CircularProgress } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { useStore, Message } from \"../store/store\";\nimport { networks } from \"../config/ethData\";\nimport { useBalances } from \"../hooks/useBalances\";\nimport { useHistory } from \"react-router-dom\";\nimport { ROUTES } from \"../config/routes\";\n\ninterface PurchaseButtonProps {\n  txInput: any;\n  portfolioBalancer: any;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  wrapper: {\n    margin: theme.spacing(1),\n    position: \"relative\",\n  },\n  buttonProgress: {\n    color: \"#81c784\",\n    position: \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    marginTop: -12,\n    marginLeft: -12,\n  },\n}));\n\nconst PurchaseButton: FC<PurchaseButtonProps> = ({\n  txInput,\n  portfolioBalancer,\n}) => {\n  const classes = useStyles();\n  const { state, dispatch } = useStore();\n  const { connectedWeb3 } = state;\n  const history = useHistory();\n  const [loading, setLoading] = useState(false);\n  const setUpdateBalance = useBalances(connectedWeb3!.account);\n\n  const purchaseAssets = async () => {\n    setLoading(true);\n    try {\n      const result = await portfolioBalancer.methods\n        .rebalance(txInput[0], txInput[1], txInput[2])\n        .send({\n          from: connectedWeb3!.account,\n          value: txInput[3],\n          gas: \"700000\",\n          gasPrice: \"1000000000\",\n        });\n      setUpdateBalance(true);\n      const message = {\n        type: \"success\",\n        text:\n          \"Congratulation! You successfully purchased the portfolio! It might take a few seconsd to update your assets.\",\n      } as Message;\n      dispatch({ type: \"updateMessage\", message });\n      history.push(ROUTES.DASHBOARD);\n      setLoading(false);\n    } catch (e) {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className={classes.wrapper}>\n      <Button\n        variant=\"contained\"\n        color=\"secondary\"\n        onClick={purchaseAssets}\n        disabled={loading}\n      >\n        Purchase assets\n      </Button>\n      {loading && (\n        <CircularProgress size={24} className={classes.buttonProgress} />\n      )}\n    </div>\n  );\n};\n\nexport default PurchaseButton;\n","/Users/jan/defi/portfolio-builder/src/views/Dashboard.tsx",["169","170","171","172","173"],"import { FC, useState, useEffect } from \"react\";\nimport {\n  Grid,\n  Typography,\n  Container,\n  CircularProgress,\n} from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Portfolio } from \"../sharedTypes/portfolios\";\nimport { formatPercentage, formatToUsd } from \"../utilities/formatters\";\nimport { Redirect, useHistory } from \"react-router-dom\";\nimport { ROUTES } from \"../config/routes\";\nimport AssetTable from \"../components/AssetTable\";\nimport { useStore } from \"../store/store\";\nimport { totalUsdBalance } from \"../utilities/calculations\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  content: {\n    padding: theme.spacing(4, 0, 6),\n  },\n}));\n\nconst Dashboard: FC = () => {\n  const classes = useStyles();\n  const { state } = useStore();\n  const { balances, connectedWeb3, prices } = state;\n\n  if (!connectedWeb3) {\n    return <Redirect to={ROUTES.PORTFOLIOS} />;\n  }\n\n  return (\n    <main>\n      {balances && connectedWeb3 && prices ? (\n        <div className={classes.content}>\n          <Container maxWidth=\"md\">\n            <Grid container spacing={4}>\n              <Grid item xs={12}>\n                <Typography\n                  component=\"h1\"\n                  variant=\"h4\"\n                  color=\"textPrimary\"\n                  gutterBottom\n                >\n                  {formatToUsd(totalUsdBalance(balances!, prices))}\n                </Typography>\n              </Grid>\n              <Grid item xs={12}>\n                <AssetTable />\n              </Grid>\n            </Grid>\n          </Container>\n        </div>\n      ) : (\n        <div className={classes.root}>\n          <CircularProgress />\n        </div>\n      )}\n    </main>\n  );\n};\nexport default Dashboard;\n","/Users/jan/defi/portfolio-builder/src/components/AssetTable.tsx",["174","175","176","177","178","179","180","181"],"/Users/jan/defi/portfolio-builder/src/components/Message.tsx",[],{"ruleId":"182","severity":1,"message":"183","line":1,"column":17,"nodeType":"184","messageId":"185","endLine":1,"endColumn":26},{"ruleId":"182","severity":1,"message":"186","line":9,"column":10,"nodeType":"184","messageId":"185","endLine":9,"endColumn":23},{"ruleId":"182","severity":1,"message":"187","line":18,"column":10,"nodeType":"184","messageId":"185","endLine":18,"endColumn":20},{"ruleId":"182","severity":1,"message":"188","line":18,"column":22,"nodeType":"184","messageId":"185","endLine":18,"endColumn":35},{"ruleId":"189","replacedBy":"190"},{"ruleId":"191","replacedBy":"192"},{"ruleId":"189","replacedBy":"193"},{"ruleId":"191","replacedBy":"194"},{"ruleId":"189","replacedBy":"195"},{"ruleId":"191","replacedBy":"196"},{"ruleId":"182","severity":1,"message":"197","line":13,"column":14,"nodeType":"184","messageId":"185","endLine":13,"endColumn":22},{"ruleId":"198","severity":1,"message":"199","line":169,"column":23,"nodeType":"200","endLine":172,"endColumn":25},{"ruleId":"189","replacedBy":"201"},{"ruleId":"191","replacedBy":"202"},{"ruleId":"189","replacedBy":"203"},{"ruleId":"191","replacedBy":"204"},{"ruleId":"182","severity":1,"message":"197","line":1,"column":21,"nodeType":"184","messageId":"185","endLine":1,"endColumn":29},{"ruleId":"182","severity":1,"message":"205","line":15,"column":9,"nodeType":"184","messageId":"185","endLine":15,"endColumn":16},{"ruleId":"182","severity":1,"message":"206","line":1,"column":35,"nodeType":"184","messageId":"185","endLine":1,"endColumn":41},{"ruleId":"207","severity":1,"message":"208","line":85,"column":31,"nodeType":"209","messageId":"210","endLine":85,"endColumn":33},{"ruleId":"182","severity":1,"message":"211","line":14,"column":3,"nodeType":"184","messageId":"185","endLine":14,"endColumn":9},{"ruleId":"182","severity":1,"message":"212","line":28,"column":10,"nodeType":"184","messageId":"185","endLine":28,"endColumn":20},{"ruleId":"213","severity":1,"message":"214","line":191,"column":6,"nodeType":"215","endLine":191,"endColumn":30,"suggestions":"216"},{"ruleId":"198","severity":1,"message":"199","line":218,"column":25,"nodeType":"200","endLine":221,"endColumn":27},{"ruleId":"213","severity":1,"message":"217","line":20,"column":6,"nodeType":"215","endLine":20,"endColumn":8,"suggestions":"218"},{"ruleId":"213","severity":1,"message":"217","line":25,"column":6,"nodeType":"215","endLine":25,"endColumn":15,"suggestions":"219"},{"ruleId":"213","severity":1,"message":"220","line":74,"column":6,"nodeType":"215","endLine":74,"endColumn":21,"suggestions":"221"},{"ruleId":"213","severity":1,"message":"222","line":47,"column":6,"nodeType":"215","endLine":47,"endColumn":21,"suggestions":"223"},{"ruleId":"213","severity":1,"message":"222","line":53,"column":6,"nodeType":"215","endLine":53,"endColumn":15,"suggestions":"224"},{"ruleId":"213","severity":1,"message":"225","line":20,"column":6,"nodeType":"215","endLine":20,"endColumn":20,"suggestions":"226"},{"ruleId":"182","severity":1,"message":"183","line":1,"column":24,"nodeType":"184","messageId":"185","endLine":1,"endColumn":33},{"ruleId":"182","severity":1,"message":"206","line":1,"column":35,"nodeType":"184","messageId":"185","endLine":1,"endColumn":41},{"ruleId":"182","severity":1,"message":"227","line":5,"column":10,"nodeType":"184","messageId":"185","endLine":5,"endColumn":18},{"ruleId":"182","severity":1,"message":"228","line":44,"column":13,"nodeType":"184","messageId":"185","endLine":44,"endColumn":19},{"ruleId":"182","severity":1,"message":"197","line":1,"column":14,"nodeType":"184","messageId":"185","endLine":1,"endColumn":22},{"ruleId":"182","severity":1,"message":"183","line":1,"column":24,"nodeType":"184","messageId":"185","endLine":1,"endColumn":33},{"ruleId":"182","severity":1,"message":"229","line":9,"column":10,"nodeType":"184","messageId":"185","endLine":9,"endColumn":19},{"ruleId":"182","severity":1,"message":"230","line":10,"column":10,"nodeType":"184","messageId":"185","endLine":10,"endColumn":26},{"ruleId":"182","severity":1,"message":"212","line":11,"column":20,"nodeType":"184","messageId":"185","endLine":11,"endColumn":30},{"ruleId":"182","severity":1,"message":"197","line":1,"column":17,"nodeType":"184","messageId":"185","endLine":1,"endColumn":25},{"ruleId":"182","severity":1,"message":"231","line":2,"column":8,"nodeType":"184","messageId":"185","endLine":2,"endColumn":12},{"ruleId":"182","severity":1,"message":"232","line":6,"column":3,"nodeType":"184","messageId":"185","endLine":6,"endColumn":14},{"ruleId":"182","severity":1,"message":"211","line":9,"column":3,"nodeType":"184","messageId":"185","endLine":9,"endColumn":9},{"ruleId":"182","severity":1,"message":"233","line":17,"column":3,"nodeType":"184","messageId":"185","endLine":17,"endColumn":9},{"ruleId":"182","severity":1,"message":"234","line":44,"column":18,"nodeType":"184","messageId":"185","endLine":44,"endColumn":26},{"ruleId":"182","severity":1,"message":"235","line":45,"column":29,"nodeType":"184","messageId":"185","endLine":45,"endColumn":42},{"ruleId":"198","severity":1,"message":"199","line":74,"column":21,"nodeType":"200","endLine":77,"endColumn":23},"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'getPortfolios' is defined but never used.","'portfolios' is assigned a value but never used.","'setPortfolios' is assigned a value but never used.","no-native-reassign",["236"],"no-negated-in-lhs",["237"],["236"],["237"],["236"],["237"],"'useState' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["236"],["237"],["236"],["237"],"'classes' is assigned a value but never used.","'useRef' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'Button' is defined but never used.","'useHistory' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'account', 'portfolioBalancer.methods', and 'txInput'. Either include them or remove the dependency array.","ArrayExpression",["238"],"React Hook useEffect has missing dependencies: 'dispatch' and 'setUpdatePrices'. Either include them or remove the dependency array.",["239"],["240"],"React Hook useEffect has missing dependencies: 'connectedWeb3' and 'tradeAmounts'. Either include them or remove the dependency array.",["241"],"React Hook useEffect has a missing dependency: 'getBalances'. Either include it or remove the dependency array.",["242"],["243"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["244"],"'networks' is defined but never used.","'result' is assigned a value but never used.","'Portfolio' is defined but never used.","'formatPercentage' is defined but never used.","'clsx' is defined but never used.","'CardActions' is defined but never used.","'Avatar' is defined but never used.","'dispatch' is assigned a value but never used.","'connectedWeb3' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"245","fix":"246"},{"desc":"247","fix":"248"},{"desc":"249","fix":"250"},{"desc":"251","fix":"252"},{"desc":"253","fix":"254"},{"desc":"255","fix":"256"},{"desc":"257","fix":"258"},"Update the dependencies array to be: [uniswapAmounts, prices, txInput, portfolioBalancer.methods, account]",{"range":"259","text":"260"},"Update the dependencies array to be: [dispatch, setUpdatePrices]",{"range":"261","text":"262"},"Update the dependencies array to be: [account, dispatch, setUpdatePrices]",{"range":"263","text":"264"},"Update the dependencies array to be: [connectedWeb3, tradeAmounts, updateUniswap]",{"range":"265","text":"266"},"Update the dependencies array to be: [getBalances, updateBalance]",{"range":"267","text":"268"},"Update the dependencies array to be: [account, getBalances]",{"range":"269","text":"270"},"Update the dependencies array to be: [dispatch, updatePrices]",{"range":"271","text":"272"},[4970,4994],"[uniswapAmounts, prices, txInput, portfolioBalancer.methods, account]",[665,667],"[dispatch, setUpdatePrices]",[773,782],"[account, dispatch, setUpdatePrices]",[2232,2247],"[connectedWeb3, tradeAmounts, updateUniswap]",[1458,1473],"[getBalances, updateBalance]",[1548,1557],"[account, getBalances]",[597,611],"[dispatch, updatePrices]"]